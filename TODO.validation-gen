P0 ("things we need to do for 1.34"):
- Pick next fields to convert
  - Focus on breadth of coverage
  - Find hard cases that prove something new
  - Use the validators we have already (union, enum, format, etc)
- Fix subresources
  - "spec" and "status" are hard coded in generator
    - drive them off of a `+subresource=status` tag?
  - Handle "/scale" better?
- Ratecheting and update validations in general
  - if new == old, do not validate?
  - Hard cases like "given a list of sloppy CIDRs used, still allow them"
- Cross field validations
  - only validate obj.X if this validation passes
  - if obj.X is value Y, then validate obj.Z
  - field found in listfield Y (e.g. volume mount name)
  - dependencies - field X is allowed IFF field Y
  - mutual exclusivitiy - field X is not allowed when Y
  - might require cross-field/conditional defaulting
    - might break the zero-value checking
- Conditions
  - plumb feature gates down
- Stop using "+k8s:validation-gen=TypeMeta" to find root types?
  - In particular: don't generate for FooList types
  - Idea:
    ```
    // +k8s:validation-gen:matchTypesWith(TypeMeta)
    // +k8s:validation-gen:matchTypesWithout(ListMeta)
    ```

P1:
- Validation logic for:
    - listMap key requiredness (no auto-fail if you have same list map key)
      - defaulted keys (key in a list map must be required but can have a default.  If default, need to use that in X places. Related to default ordering)
    - immutable (update)
- Should defaults take +k8s:default?
  - Adopted convention of prefix "+k8s:", do defaults also get "+k8s:"?
- Validation logic for:
  - more format
  - more schema
- lists - whether add/remove are allowed on update
- label/annotation validations based on Object type
- IntOrString
- Consider adding flag-optional mutation checks along the way through the REST
  stack (copy object, call strategy, diff).
- Fix defaulting ordering vs manual
- Add CEL validation rules
- When calling a validation function in another pkg, we need to make sure it exists
  - by name convention + fingerprint
  - by explicit tag (e.g. // +validation-func-for=...
- Warning support
  - Decide how to implement
- Migrate core group to declarative validation
  - xref: Alex's WIP for jobs: https://github.com/alexzielenski/kubectl-validate/blob/jobset/jobset/patches/apis/jobset.x-k8s.io/v1alpha2.json
  - Enable declarative validation for strategies and test
- failure tests for error messages
- Test for registration / init func
- Correlate listType=set by exact value
  - maybe allow a sloppy compare for IPs?
- Allow some form of "key" like listMap, but for atomic lists
  - uniqueness
  - correlated updates
  - single field manager
- Investigate "chains" style output so CRDs can use the same primitives
- Simplify the "always nilable" logic
  - e.g. always pass non-pointer `value` and pointer `oldValue`; return
    internal error if a pointer field is nil and not checked for
    `required`/`optional`.

P2:
- Deduplicate `jsontagutil.go`. It was copy-pasted in from applyconfig-gen
- Deduplicate most of enum.go, it was copy-pasted in from kube-openapi
- Use Go-standard-style names for generated functions
  for scalar testing that should be put in declarative validator test code
- When we do CRDs:
  - accept or warn on kubebuilder comments?
- Improve error messages (e.g. DNS label)
  - was reverted because of test impact


Later:
- Try to link typedef-of-typedef to chain validations?
  ```
  Get pos in walkType
  for each file in pkg.Syntax[] (ast.File)
        for each decl in file.Decls[] (ast.Decl -> ast.GenDecl)
                for each spec in decl.Specs[] (ast.Spec -> ast.TypeSpec)
                        if Name.NamePos matches {
                                Look at spec.Type
                                if is ast.Ident
                                        look at ident.Obj
                                        if nil
                                                builtin?
                                        if obj.Kind = Typ
                                                look at obj.Name and obj.Decl.(TypeSpec).Name.NamePos
                                                match that to another type?
  ```
- Add file+line info to gengo Type and Member (for better errors)
  - parser.fset.Position(Named.Obj().Pos())
  - parser.fset.Position(Var.Pos())
- Can we fix the gengo alias-to-ptr issue?  Causes problems in other generators.
  ```
  diff --git a/vendor/k8s.io/gengo/v2/parser/parse.go b/vendor/k8s.io/gengo/v2/parser/parse.go
  index a5993d16393..9214db19873 100644
  --- a/vendor/k8s.io/gengo/v2/parser/parse.go
  +++ b/vendor/k8s.io/gengo/v2/parser/parse.go
  @@ -726,7 +726,7 @@ func (p *Parser) walkType(u types.Universe, useName *types.Name, in gotypes.Type
          case *gotypes.Named:
                  var out *types.Type
                  switch t.Underlying().(type) {
  -               case *gotypes.Named, *gotypes.Basic, *gotypes.Map, *gotypes.Slice:
  +               case *gotypes.Named, *gotypes.Basic, *gotypes.Map, *gotypes.Slice, *gotypes.Pointer:
                          name := goNameToName(t.String())
                          out = u.Type(name)
                          if out.Kind != types.Unknown {
  ```
- Exclude all fields that do not have a json struct tag with a name from validation.
- Move logic from k8s.io/apimachinery/pkg/util/validation/ to k8s.io/apimachinery/pkg/api/
