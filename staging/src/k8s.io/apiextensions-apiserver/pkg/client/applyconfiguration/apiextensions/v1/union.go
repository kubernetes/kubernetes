/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// UnionApplyConfiguration represents a declarative configuration of the Union type for use
// with apply.
type UnionApplyConfiguration struct {
	Discriminator *string                         `json:"discriminator,omitempty"`
	Members       []UnionMemberApplyConfiguration `json:"members,omitempty"`
	ZeroOrOneOf   *bool                           `json:"zeroOrOneOf,omitempty"`
}

// UnionApplyConfiguration constructs a declarative configuration of the Union type for use with
// apply.
func Union() *UnionApplyConfiguration {
	return &UnionApplyConfiguration{}
}

// WithDiscriminator sets the Discriminator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Discriminator field is set to the value of the last call.
func (b *UnionApplyConfiguration) WithDiscriminator(value string) *UnionApplyConfiguration {
	b.Discriminator = &value
	return b
}

// WithMembers adds the given value to the Members field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Members field.
func (b *UnionApplyConfiguration) WithMembers(values ...*UnionMemberApplyConfiguration) *UnionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMembers")
		}
		b.Members = append(b.Members, *values[i])
	}
	return b
}

// WithZeroOrOneOf sets the ZeroOrOneOf field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ZeroOrOneOf field is set to the value of the last call.
func (b *UnionApplyConfiguration) WithZeroOrOneOf(value bool) *UnionApplyConfiguration {
	b.ZeroOrOneOf = &value
	return b
}
