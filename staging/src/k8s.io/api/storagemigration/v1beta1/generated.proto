/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.storagemigration.v1beta1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/storagemigration/v1beta1";

// StorageVersionMigration represents a migration of stored data to the latest
// storage version.
message StorageVersionMigration {
  // Standard object metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the migration.
  // +optional
  optional StorageVersionMigrationSpec spec = 2;

  // Status of the migration.
  // +optional
  optional StorageVersionMigrationStatus status = 3;
}

// StorageVersionMigrationList is a collection of storage version migrations.
message StorageVersionMigrationList {
  // Standard list metadata
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of StorageVersionMigration
  repeated StorageVersionMigration items = 2;
}

// Spec of the storage version migration.
message StorageVersionMigrationSpec {
  // The resource that is being migrated. The migrator sends requests to
  // the endpoint serving the resource.
  // Immutable.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupResource resource = 1;
}

// Status of the storage version migration.
message StorageVersionMigrationStatus {
  // The latest available observations of the migration's current state.
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +listType=map
  // +listMapKey=type
  // +optional
  repeated .k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 1;

  // ResourceVersion to compare with the GC cache for performing the migration.
  // This is the current resource version of given group, version and resource when
  // kube-controller-manager first observes this StorageVersionMigration resource.
  optional string resourceVersion = 2;
}

