/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.kube_aggregator.pkg.apis.apiregistration.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1";

// APIService represents a server for a particular GroupVersion.
// Name must be "version.group".
message APIService {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec contains information for locating and communicating with a server
  optional APIServiceSpec spec = 2;

  // Status contains derived information about an API server
  optional APIServiceStatus status = 3;
}

// APIServiceCondition describes the state of an APIService at a particular point
message APIServiceCondition {
  // Type is the type of the condition.
  optional string type = 1;

  // Status is the status of the condition.
  // Can be True, False, Unknown.
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // Unique, one-word, CamelCase reason for the condition's last transition.
  // +optional
  optional string reason = 4;

  // Human-readable message indicating details about last transition.
  // +optional
  optional string message = 5;
}

// APIServiceList is a list of APIService objects.
message APIServiceList {
  // Standard list metadata
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of APIService
  repeated APIService items = 2;
}

// APIServiceSpec contains information for locating and communicating with a server.
// Only https is supported, though you are able to disable certificate verification.
message APIServiceSpec {
  // Service is a reference to the service for this API server.  It must communicate
  // on port 443.
  // If the Service is nil, that means the handling for the API groupversion is handled locally on this server.
  // The call will simply delegate to the normal handler chain to be fulfilled.
  // +optional
  optional ServiceReference service = 1;

  // Group is the API group name this server hosts
  optional string group = 2;

  // Version is the API version this server hosts.  For example, "v1"
  optional string version = 3;

  // InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server.
  // This is strongly discouraged.  You should use the CABundle instead.
  optional bool insecureSkipTLSVerify = 4;

  // CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
  // If unspecified, system trust roots on the apiserver are used.
  // +listType=atomic
  // +optional
  optional bytes caBundle = 5;

  // GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones.
  // Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority.
  // The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10).
  // The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo)
  // We'd recommend something like: *.k8s.io (except extensions) at 18000 and
  // PaaSes (OpenShift, Deis) are recommended to be in the 2000s
  optional int32 groupPriorityMinimum = 7;

  // VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero.
  // The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10).
  // Since it's inside of a group, the number can be small, probably in the 10s.
  // In case of equal version priorities, the version string will be used to compute the order inside a group.
  // If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered
  // lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version),
  // then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first
  // by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major
  // version, then minor version. An example sorted list of versions:
  // v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
  optional int32 versionPriority = 8;
}

// APIServiceStatus contains derived information about an API server
message APIServiceStatus {
  // Current service state of apiService.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +listType=map
  // +listMapKey=type
  repeated APIServiceCondition conditions = 1;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message ServiceReference {
  // Namespace is the namespace of the service
  optional string namespace = 1;

  // Name is the name of the service
  optional string name = 2;

  // If specified, the port on the service that hosting webhook.
  // Default to 443 for backward compatibility.
  // `port` should be a valid port number (1-65535, inclusive).
  // +optional
  optional int32 port = 3;
}

