// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue530.proto

package issue530

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Foo5 struct {
	Bar1    Bar1             `protobuf:"bytes,1,opt,name=bar1" json:"bar1"`
	Bar2    *Bar1            `protobuf:"bytes,2,opt,name=bar2" json:"bar2,omitempty"`
	Bar3    Bar2             `protobuf:"bytes,3,opt,name=bar3" json:"bar3"`
	Bar4    *Bar2            `protobuf:"bytes,4,opt,name=bar4" json:"bar4,omitempty"`
	Bars1   []Bar1           `protobuf:"bytes,5,rep,name=bars1" json:"bars1"`
	Bars2   []*Bar1          `protobuf:"bytes,6,rep,name=bars2" json:"bars2,omitempty"`
	Bars3   []Bar2           `protobuf:"bytes,7,rep,name=bars3" json:"bars3"`
	Bars4   []*Bar2          `protobuf:"bytes,8,rep,name=bars4" json:"bars4,omitempty"`
	Barrs1  []Bar3           `protobuf:"bytes,9,rep,name=barrs1" json:"barrs1"`
	Barrs2  []Bar5           `protobuf:"bytes,10,rep,name=barrs2" json:"barrs2"`
	Barmap1 map[string]*Bar3 `protobuf:"bytes,11,rep,name=barmap1" json:"barmap1,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Barmap2 map[string]*Bar5 `protobuf:"bytes,12,rep,name=barmap2" json:"barmap2,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Foo5) Reset()      { *m = Foo5{} }
func (*Foo5) ProtoMessage() {}
func (*Foo5) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{0}
}
func (m *Foo5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Foo5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Foo5.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Foo5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo5.Merge(m, src)
}
func (m *Foo5) XXX_Size() int {
	return m.Size()
}
func (m *Foo5) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo5.DiscardUnknown(m)
}

var xxx_messageInfo_Foo5 proto.InternalMessageInfo

func (m *Foo5) GetBar1() Bar1 {
	if m != nil {
		return m.Bar1
	}
	return Bar1{}
}

func (m *Foo5) GetBar2() *Bar1 {
	if m != nil {
		return m.Bar2
	}
	return nil
}

func (m *Foo5) GetBar3() Bar2 {
	if m != nil {
		return m.Bar3
	}
	return Bar2{}
}

func (m *Foo5) GetBar4() *Bar2 {
	if m != nil {
		return m.Bar4
	}
	return nil
}

func (m *Foo5) GetBars1() []Bar1 {
	if m != nil {
		return m.Bars1
	}
	return nil
}

func (m *Foo5) GetBars2() []*Bar1 {
	if m != nil {
		return m.Bars2
	}
	return nil
}

func (m *Foo5) GetBars3() []Bar2 {
	if m != nil {
		return m.Bars3
	}
	return nil
}

func (m *Foo5) GetBars4() []*Bar2 {
	if m != nil {
		return m.Bars4
	}
	return nil
}

func (m *Foo5) GetBarrs1() []Bar3 {
	if m != nil {
		return m.Barrs1
	}
	return nil
}

func (m *Foo5) GetBarrs2() []Bar5 {
	if m != nil {
		return m.Barrs2
	}
	return nil
}

func (m *Foo5) GetBarmap1() map[string]*Bar3 {
	if m != nil {
		return m.Barmap1
	}
	return nil
}

func (m *Foo5) GetBarmap2() map[string]*Bar5 {
	if m != nil {
		return m.Barmap2
	}
	return nil
}

type Bar1 struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str"`
}

func (m *Bar1) Reset()      { *m = Bar1{} }
func (*Bar1) ProtoMessage() {}
func (*Bar1) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{1}
}
func (m *Bar1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar1.Merge(m, src)
}
func (m *Bar1) XXX_Size() int {
	return m.Size()
}
func (m *Bar1) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar1.DiscardUnknown(m)
}

var xxx_messageInfo_Bar1 proto.InternalMessageInfo

func (m *Bar1) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type Bar2 struct {
	Str *string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
}

func (m *Bar2) Reset()      { *m = Bar2{} }
func (*Bar2) ProtoMessage() {}
func (*Bar2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{2}
}
func (m *Bar2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar2.Merge(m, src)
}
func (m *Bar2) XXX_Size() int {
	return m.Size()
}
func (m *Bar2) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar2.DiscardUnknown(m)
}

var xxx_messageInfo_Bar2 proto.InternalMessageInfo

func (m *Bar2) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

type Bar3 struct {
	Bars4 []Bar4 `protobuf:"bytes,1,rep,name=bars4" json:"bars4"`
	Bars2 []Bar2 `protobuf:"bytes,2,rep,name=bars2" json:"bars2"`
}

func (m *Bar3) Reset()      { *m = Bar3{} }
func (*Bar3) ProtoMessage() {}
func (*Bar3) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{3}
}
func (m *Bar3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar3.Merge(m, src)
}
func (m *Bar3) XXX_Size() int {
	return m.Size()
}
func (m *Bar3) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar3.DiscardUnknown(m)
}

var xxx_messageInfo_Bar3 proto.InternalMessageInfo

func (m *Bar3) GetBars4() []Bar4 {
	if m != nil {
		return m.Bars4
	}
	return nil
}

func (m *Bar3) GetBars2() []Bar2 {
	if m != nil {
		return m.Bars2
	}
	return nil
}

type Bar4 struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str"`
}

func (m *Bar4) Reset()      { *m = Bar4{} }
func (*Bar4) ProtoMessage() {}
func (*Bar4) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{4}
}
func (m *Bar4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar4.Merge(m, src)
}
func (m *Bar4) XXX_Size() int {
	return m.Size()
}
func (m *Bar4) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar4.DiscardUnknown(m)
}

var xxx_messageInfo_Bar4 proto.InternalMessageInfo

func (m *Bar4) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type Bar5 struct {
	Bars2 []*Bar2 `protobuf:"bytes,1,rep,name=bars2" json:"bars2,omitempty"`
	Bars1 []*Bar1 `protobuf:"bytes,2,rep,name=bars1" json:"bars1,omitempty"`
}

func (m *Bar5) Reset()      { *m = Bar5{} }
func (*Bar5) ProtoMessage() {}
func (*Bar5) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{5}
}
func (m *Bar5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar5.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar5.Merge(m, src)
}
func (m *Bar5) XXX_Size() int {
	return m.Size()
}
func (m *Bar5) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar5.DiscardUnknown(m)
}

var xxx_messageInfo_Bar5 proto.InternalMessageInfo

func (m *Bar5) GetBars2() []*Bar2 {
	if m != nil {
		return m.Bars2
	}
	return nil
}

func (m *Bar5) GetBars1() []*Bar1 {
	if m != nil {
		return m.Bars1
	}
	return nil
}

type Bar7 struct {
	Bars71 []Bar7  `protobuf:"bytes,1,rep,name=bars71" json:"bars71"`
	Bars72 []*Bar7 `protobuf:"bytes,2,rep,name=bars72" json:"bars72,omitempty"`
	Str1   string  `protobuf:"bytes,3,opt,name=str1" json:"str1"`
	Str2   *string `protobuf:"bytes,4,opt,name=str2" json:"str2,omitempty"`
}

func (m *Bar7) Reset()      { *m = Bar7{} }
func (*Bar7) ProtoMessage() {}
func (*Bar7) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{6}
}
func (m *Bar7) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar7.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar7.Merge(m, src)
}
func (m *Bar7) XXX_Size() int {
	return m.Size()
}
func (m *Bar7) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar7.DiscardUnknown(m)
}

var xxx_messageInfo_Bar7 proto.InternalMessageInfo

func (m *Bar7) GetBars71() []Bar7 {
	if m != nil {
		return m.Bars71
	}
	return nil
}

func (m *Bar7) GetBars72() []*Bar7 {
	if m != nil {
		return m.Bars72
	}
	return nil
}

func (m *Bar7) GetStr1() string {
	if m != nil {
		return m.Str1
	}
	return ""
}

func (m *Bar7) GetStr2() string {
	if m != nil && m.Str2 != nil {
		return *m.Str2
	}
	return ""
}

type Bar8 struct {
	Bars1 []Bar9 `protobuf:"bytes,1,rep,name=bars1" json:"bars1"`
}

func (m *Bar8) Reset()      { *m = Bar8{} }
func (*Bar8) ProtoMessage() {}
func (*Bar8) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{7}
}
func (m *Bar8) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar8) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar8.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar8) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar8.Merge(m, src)
}
func (m *Bar8) XXX_Size() int {
	return m.Size()
}
func (m *Bar8) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar8.DiscardUnknown(m)
}

var xxx_messageInfo_Bar8 proto.InternalMessageInfo

func (m *Bar8) GetBars1() []Bar9 {
	if m != nil {
		return m.Bars1
	}
	return nil
}

type Bar9 struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str"`
}

func (m *Bar9) Reset()         { *m = Bar9{} }
func (m *Bar9) String() string { return proto.CompactTextString(m) }
func (*Bar9) ProtoMessage()    {}
func (*Bar9) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2447996d16f3907, []int{8}
}
func (m *Bar9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar9.Merge(m, src)
}
func (m *Bar9) XXX_Size() int {
	return m.Size()
}
func (m *Bar9) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar9.DiscardUnknown(m)
}

var xxx_messageInfo_Bar9 proto.InternalMessageInfo

func (m *Bar9) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo5)(nil), "issue530.Foo5")
	proto.RegisterMapType((map[string]*Bar3)(nil), "issue530.Foo5.Barmap1Entry")
	proto.RegisterMapType((map[string]*Bar5)(nil), "issue530.Foo5.Barmap2Entry")
	proto.RegisterType((*Bar1)(nil), "issue530.Bar1")
	proto.RegisterType((*Bar2)(nil), "issue530.Bar2")
	proto.RegisterType((*Bar3)(nil), "issue530.Bar3")
	proto.RegisterType((*Bar4)(nil), "issue530.Bar4")
	proto.RegisterType((*Bar5)(nil), "issue530.Bar5")
	proto.RegisterType((*Bar7)(nil), "issue530.Bar7")
	proto.RegisterType((*Bar8)(nil), "issue530.Bar8")
	proto.RegisterType((*Bar9)(nil), "issue530.Bar9")
}

func init() { proto.RegisterFile("issue530.proto", fileDescriptor_c2447996d16f3907) }

var fileDescriptor_c2447996d16f3907 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xfd, 0x12, 0xa7, 0x4d, 0xaf, 0x55, 0x85, 0x6e, 0x40, 0xa7, 0x22, 0x5d, 0x23, 0x8b,
	0x21, 0x42, 0x25, 0xc5, 0xcf, 0xb6, 0xdc, 0x76, 0x8c, 0x04, 0x03, 0x63, 0x3e, 0x00, 0x92, 0x8d,
	0x42, 0xa8, 0xa0, 0xb8, 0x3a, 0x3b, 0x48, 0xdd, 0xfa, 0x11, 0x98, 0x10, 0x23, 0x23, 0x1f, 0x81,
	0x91, 0xb1, 0x63, 0xc7, 0x0e, 0x08, 0x11, 0xe7, 0x4b, 0x30, 0x22, 0x3f, 0x9f, 0x63, 0x47, 0x9c,
	0x89, 0xd4, 0xed, 0xee, 0xde, 0xef, 0xfd, 0xdf, 0xbb, 0xbb, 0xff, 0x63, 0xfb, 0xe7, 0x69, 0x3a,
	0x9f, 0x06, 0xde, 0xb3, 0xd1, 0xa5, 0x4a, 0xb2, 0x84, 0xf7, 0xab, 0xfd, 0xc1, 0xd3, 0xd9, 0x79,
	0xf6, 0x76, 0x1e, 0x8f, 0x5e, 0x27, 0x17, 0xc7, 0xb3, 0x64, 0x96, 0x1c, 0x13, 0x10, 0xcf, 0xdf,
	0xd0, 0x8e, 0x36, 0xb4, 0x2a, 0x13, 0x9d, 0x1f, 0x3d, 0x66, 0xbf, 0x48, 0x92, 0x80, 0x0f, 0x99,
	0x1d, 0x47, 0xca, 0x15, 0x30, 0x80, 0xe1, 0x2e, 0xee, 0x8f, 0x56, 0x05, 0xc6, 0x91, 0x72, 0xc7,
	0xf6, 0xcd, 0xaf, 0x43, 0x6b, 0x42, 0x84, 0x26, 0x51, 0x74, 0x5a, 0x49, 0x20, 0x12, 0x35, 0xe9,
	0x89, 0xae, 0x81, 0xc4, 0x86, 0xa6, 0xa7, 0x49, 0x5f, 0xd8, 0xad, 0x64, 0xa9, 0xe9, 0xf3, 0x27,
	0xac, 0x17, 0x47, 0x2a, 0x75, 0x45, 0x6f, 0xd0, 0x6d, 0x6d, 0xb4, 0x44, 0x2a, 0x16, 0xc5, 0x56,
	0x2b, 0x0b, 0x25, 0x8b, 0x15, 0xeb, 0x89, 0x6d, 0x03, 0x8b, 0x4d, 0x5d, 0xaf, 0x62, 0x7d, 0xd1,
	0x6f, 0x65, 0xb5, 0xae, 0xcf, 0x8f, 0xd8, 0x56, 0x1c, 0xa9, 0xa2, 0xe1, 0x1d, 0x03, 0xec, 0x69,
	0x61, 0xcd, 0xac, 0x68, 0x14, 0xcc, 0x40, 0x07, 0x6b, 0x34, 0xf2, 0x80, 0x6d, 0xc7, 0x91, 0xba,
	0x88, 0x2e, 0x5d, 0xb1, 0x4b, 0xf8, 0xa3, 0x1a, 0x2f, 0x3e, 0xb5, 0xc8, 0x29, 0xa2, 0xcf, 0x3f,
	0x64, 0xea, 0x6a, 0x52, 0xb1, 0x75, 0x1a, 0x8a, 0xbd, 0xff, 0xa4, 0xe1, 0x5a, 0x1a, 0x1e, 0xbc,
	0x64, 0x7b, 0x4d, 0x3d, 0xfe, 0x80, 0x75, 0xdf, 0x4d, 0xaf, 0xc8, 0x30, 0x3b, 0x93, 0x62, 0xc9,
	0x1f, 0xb3, 0xde, 0xc7, 0xe8, 0xfd, 0x7c, 0x6a, 0xb4, 0x86, 0x37, 0x29, 0x83, 0x67, 0x9d, 0x13,
	0xa8, 0xb5, 0xf0, 0x5e, 0x5a, 0x41, 0x43, 0xcb, 0x91, 0xcc, 0x2e, 0xbe, 0x93, 0x3f, 0x64, 0xdd,
	0x34, 0x53, 0xa5, 0x86, 0x7e, 0xa8, 0xe2, 0x40, 0xc7, 0xf1, 0xdf, 0x38, 0x94, 0xf1, 0x57, 0x14,
	0x6f, 0xfc, 0x2a, 0x18, 0x9e, 0xde, 0x6f, 0x3a, 0xc0, 0xaf, 0x9d, 0xd5, 0xd9, 0xe4, 0x16, 0xd4,
	0xf5, 0xfd, 0xd6, 0xfe, 0xca, 0xfa, 0x41, 0xad, 0x09, 0x9b, 0x5c, 0x85, 0xf5, 0x14, 0x74, 0x36,
	0x39, 0xdb, 0x75, 0x3e, 0x03, 0x15, 0x08, 0xb5, 0xb9, 0xd2, 0xd0, 0x35, 0x56, 0x08, 0x1b, 0xe6,
	0x4a, 0x43, 0x77, 0x45, 0x9b, 0xef, 0x18, 0xea, 0x1a, 0x9a, 0xe1, 0x82, 0xd9, 0x69, 0xa6, 0x5c,
	0x1a, 0xf5, 0xea, 0x76, 0x74, 0xa2, 0x23, 0x48, 0xa3, 0x5d, 0xbd, 0x3b, 0x9d, 0x38, 0x48, 0x7d,
	0x9d, 0xd4, 0x97, 0x31, 0xb5, 0x75, 0xba, 0x36, 0xd2, 0xce, 0x90, 0x72, 0x4e, 0xdb, 0x1e, 0xf3,
	0xac, 0xff, 0xe5, 0xeb, 0x21, 0x5c, 0xff, 0x1c, 0x58, 0xe3, 0xa3, 0xbb, 0x85, 0xb4, 0xfe, 0x2c,
	0x24, 0x5c, 0xe7, 0x12, 0xbe, 0xe5, 0x12, 0xbe, 0xe7, 0x12, 0x6e, 0x72, 0x09, 0xb7, 0xb9, 0x84,
	0xdf, 0xb9, 0x84, 0x4f, 0x4b, 0x69, 0xdd, 0x2e, 0xa5, 0x75, 0xb7, 0x94, 0xd6, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x98, 0xa1, 0x12, 0x2d, 0x51, 0x05, 0x00, 0x00,
}

func (this *Foo5) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo5)
	if !ok {
		that2, ok := that.(Foo5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bar1.Equal(&that1.Bar1) {
		return false
	}
	if !this.Bar2.Equal(that1.Bar2) {
		return false
	}
	if !this.Bar3.Equal(&that1.Bar3) {
		return false
	}
	if !this.Bar4.Equal(that1.Bar4) {
		return false
	}
	if len(this.Bars1) != len(that1.Bars1) {
		return false
	}
	for i := range this.Bars1 {
		if !this.Bars1[i].Equal(&that1.Bars1[i]) {
			return false
		}
	}
	if len(this.Bars2) != len(that1.Bars2) {
		return false
	}
	for i := range this.Bars2 {
		if !this.Bars2[i].Equal(that1.Bars2[i]) {
			return false
		}
	}
	if len(this.Bars3) != len(that1.Bars3) {
		return false
	}
	for i := range this.Bars3 {
		if !this.Bars3[i].Equal(&that1.Bars3[i]) {
			return false
		}
	}
	if len(this.Bars4) != len(that1.Bars4) {
		return false
	}
	for i := range this.Bars4 {
		if !this.Bars4[i].Equal(that1.Bars4[i]) {
			return false
		}
	}
	if len(this.Barrs1) != len(that1.Barrs1) {
		return false
	}
	for i := range this.Barrs1 {
		if !this.Barrs1[i].Equal(&that1.Barrs1[i]) {
			return false
		}
	}
	if len(this.Barrs2) != len(that1.Barrs2) {
		return false
	}
	for i := range this.Barrs2 {
		if !this.Barrs2[i].Equal(&that1.Barrs2[i]) {
			return false
		}
	}
	if len(this.Barmap1) != len(that1.Barmap1) {
		return false
	}
	for i := range this.Barmap1 {
		if !this.Barmap1[i].Equal(that1.Barmap1[i]) {
			return false
		}
	}
	if len(this.Barmap2) != len(that1.Barmap2) {
		return false
	}
	for i := range this.Barmap2 {
		if !this.Barmap2[i].Equal(that1.Barmap2[i]) {
			return false
		}
	}
	return true
}
func (this *Bar1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar1)
	if !ok {
		that2, ok := that.(Bar1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (this *Bar2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar2)
	if !ok {
		that2, ok := that.(Bar2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != nil && that1.Str != nil {
		if *this.Str != *that1.Str {
			return false
		}
	} else if this.Str != nil {
		return false
	} else if that1.Str != nil {
		return false
	}
	return true
}
func (this *Bar3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar3)
	if !ok {
		that2, ok := that.(Bar3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bars4) != len(that1.Bars4) {
		return false
	}
	for i := range this.Bars4 {
		if !this.Bars4[i].Equal(&that1.Bars4[i]) {
			return false
		}
	}
	if len(this.Bars2) != len(that1.Bars2) {
		return false
	}
	for i := range this.Bars2 {
		if !this.Bars2[i].Equal(&that1.Bars2[i]) {
			return false
		}
	}
	return true
}
func (this *Bar4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar4)
	if !ok {
		that2, ok := that.(Bar4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (this *Bar5) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar5)
	if !ok {
		that2, ok := that.(Bar5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bars2) != len(that1.Bars2) {
		return false
	}
	for i := range this.Bars2 {
		if !this.Bars2[i].Equal(that1.Bars2[i]) {
			return false
		}
	}
	if len(this.Bars1) != len(that1.Bars1) {
		return false
	}
	for i := range this.Bars1 {
		if !this.Bars1[i].Equal(that1.Bars1[i]) {
			return false
		}
	}
	return true
}
func (this *Bar7) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar7)
	if !ok {
		that2, ok := that.(Bar7)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bars71) != len(that1.Bars71) {
		return false
	}
	for i := range this.Bars71 {
		if !this.Bars71[i].Equal(&that1.Bars71[i]) {
			return false
		}
	}
	if len(this.Bars72) != len(that1.Bars72) {
		return false
	}
	for i := range this.Bars72 {
		if !this.Bars72[i].Equal(that1.Bars72[i]) {
			return false
		}
	}
	if this.Str1 != that1.Str1 {
		return false
	}
	if this.Str2 != nil && that1.Str2 != nil {
		if *this.Str2 != *that1.Str2 {
			return false
		}
	} else if this.Str2 != nil {
		return false
	} else if that1.Str2 != nil {
		return false
	}
	return true
}
func (this *Bar8) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar8)
	if !ok {
		that2, ok := that.(Bar8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bars1) != len(that1.Bars1) {
		return false
	}
	for i := range this.Bars1 {
		if !this.Bars1[i].Equal(&that1.Bars1[i]) {
			return false
		}
	}
	return true
}
func (this *Bar9) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar9)
	if !ok {
		that2, ok := that.(Bar9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (m *Foo5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Foo5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Foo5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barmap2) > 0 {
		for k := range m.Barmap2 {
			v := m.Barmap2[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintIssue530(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIssue530(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIssue530(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Barmap1) > 0 {
		for k := range m.Barmap1 {
			v := m.Barmap1[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintIssue530(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIssue530(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIssue530(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Barrs2) > 0 {
		for iNdEx := len(m.Barrs2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barrs2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Barrs1) > 0 {
		for iNdEx := len(m.Barrs1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barrs1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Bars4) > 0 {
		for iNdEx := len(m.Bars4) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars4[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Bars3) > 0 {
		for iNdEx := len(m.Bars3) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars3[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Bars2) > 0 {
		for iNdEx := len(m.Bars2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Bars1) > 0 {
		for iNdEx := len(m.Bars1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Bar4 != nil {
		{
			size, err := m.Bar4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIssue530(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Bar3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIssue530(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Bar2 != nil {
		{
			size, err := m.Bar2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIssue530(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Bar1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIssue530(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bar1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintIssue530(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bar2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Str != nil {
		i -= len(*m.Str)
		copy(dAtA[i:], *m.Str)
		i = encodeVarintIssue530(dAtA, i, uint64(len(*m.Str)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bar3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bars2) > 0 {
		for iNdEx := len(m.Bars2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bars4) > 0 {
		for iNdEx := len(m.Bars4) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars4[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bar4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintIssue530(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bar5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bars1) > 0 {
		for iNdEx := len(m.Bars1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bars2) > 0 {
		for iNdEx := len(m.Bars2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bar7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar7) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar7) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Str2 != nil {
		i -= len(*m.Str2)
		copy(dAtA[i:], *m.Str2)
		i = encodeVarintIssue530(dAtA, i, uint64(len(*m.Str2)))
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Str1)
	copy(dAtA[i:], m.Str1)
	i = encodeVarintIssue530(dAtA, i, uint64(len(m.Str1)))
	i--
	dAtA[i] = 0x1a
	if len(m.Bars72) > 0 {
		for iNdEx := len(m.Bars72) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars72[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bars71) > 0 {
		for iNdEx := len(m.Bars71) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars71[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bar8) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar8) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar8) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bars1) > 0 {
		for iNdEx := len(m.Bars1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bars1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue530(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bar9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bar9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintIssue530(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIssue530(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssue530(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFoo5(r randyIssue530, easy bool) *Foo5 {
	this := &Foo5{}
	v1 := NewPopulatedBar1(r, easy)
	this.Bar1 = *v1
	if r.Intn(5) != 0 {
		this.Bar2 = NewPopulatedBar1(r, easy)
	}
	v2 := NewPopulatedBar2(r, easy)
	this.Bar3 = *v2
	if r.Intn(5) != 0 {
		this.Bar4 = NewPopulatedBar2(r, easy)
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Bars1 = make([]Bar1, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedBar1(r, easy)
			this.Bars1[i] = *v4
		}
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Bars2 = make([]*Bar1, v5)
		for i := 0; i < v5; i++ {
			this.Bars2[i] = NewPopulatedBar1(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Bars3 = make([]Bar2, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedBar2(r, easy)
			this.Bars3[i] = *v7
		}
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Bars4 = make([]*Bar2, v8)
		for i := 0; i < v8; i++ {
			this.Bars4[i] = NewPopulatedBar2(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Barrs1 = make([]Bar3, v9)
		for i := 0; i < v9; i++ {
			v10 := NewPopulatedBar3(r, easy)
			this.Barrs1[i] = *v10
		}
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Barrs2 = make([]Bar5, v11)
		for i := 0; i < v11; i++ {
			v12 := NewPopulatedBar5(r, easy)
			this.Barrs2[i] = *v12
		}
	}
	if r.Intn(5) != 0 {
		v13 := r.Intn(10)
		this.Barmap1 = make(map[string]*Bar3)
		for i := 0; i < v13; i++ {
			this.Barmap1[randStringIssue530(r)] = NewPopulatedBar3(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v14 := r.Intn(10)
		this.Barmap2 = make(map[string]*Bar5)
		for i := 0; i < v14; i++ {
			this.Barmap2[randStringIssue530(r)] = NewPopulatedBar5(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar1(r randyIssue530, easy bool) *Bar1 {
	this := &Bar1{}
	this.Str = string(randStringIssue530(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar2(r randyIssue530, easy bool) *Bar2 {
	this := &Bar2{}
	if r.Intn(5) != 0 {
		v15 := string(randStringIssue530(r))
		this.Str = &v15
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar3(r randyIssue530, easy bool) *Bar3 {
	this := &Bar3{}
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.Bars4 = make([]Bar4, v16)
		for i := 0; i < v16; i++ {
			v17 := NewPopulatedBar4(r, easy)
			this.Bars4[i] = *v17
		}
	}
	if r.Intn(5) != 0 {
		v18 := r.Intn(5)
		this.Bars2 = make([]Bar2, v18)
		for i := 0; i < v18; i++ {
			v19 := NewPopulatedBar2(r, easy)
			this.Bars2[i] = *v19
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar4(r randyIssue530, easy bool) *Bar4 {
	this := &Bar4{}
	this.Str = string(randStringIssue530(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar5(r randyIssue530, easy bool) *Bar5 {
	this := &Bar5{}
	if r.Intn(5) != 0 {
		v20 := r.Intn(5)
		this.Bars2 = make([]*Bar2, v20)
		for i := 0; i < v20; i++ {
			this.Bars2[i] = NewPopulatedBar2(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v21 := r.Intn(5)
		this.Bars1 = make([]*Bar1, v21)
		for i := 0; i < v21; i++ {
			this.Bars1[i] = NewPopulatedBar1(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar7(r randyIssue530, easy bool) *Bar7 {
	this := &Bar7{}
	if r.Intn(5) == 0 {
		v22 := r.Intn(5)
		this.Bars71 = make([]Bar7, v22)
		for i := 0; i < v22; i++ {
			v23 := NewPopulatedBar7(r, easy)
			this.Bars71[i] = *v23
		}
	}
	if r.Intn(5) == 0 {
		v24 := r.Intn(5)
		this.Bars72 = make([]*Bar7, v24)
		for i := 0; i < v24; i++ {
			this.Bars72[i] = NewPopulatedBar7(r, easy)
		}
	}
	this.Str1 = string(randStringIssue530(r))
	if r.Intn(5) != 0 {
		v25 := string(randStringIssue530(r))
		this.Str2 = &v25
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar8(r randyIssue530, easy bool) *Bar8 {
	this := &Bar8{}
	if r.Intn(5) != 0 {
		v26 := r.Intn(5)
		this.Bars1 = make([]Bar9, v26)
		for i := 0; i < v26; i++ {
			v27 := NewPopulatedBar9(r, easy)
			this.Bars1[i] = *v27
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBar9(r randyIssue530, easy bool) *Bar9 {
	this := &Bar9{}
	this.Str = string(randStringIssue530(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIssue530 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIssue530(r randyIssue530) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIssue530(r randyIssue530) string {
	v28 := r.Intn(100)
	tmps := make([]rune, v28)
	for i := 0; i < v28; i++ {
		tmps[i] = randUTF8RuneIssue530(r)
	}
	return string(tmps)
}
func randUnrecognizedIssue530(r randyIssue530, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIssue530(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIssue530(dAtA []byte, r randyIssue530, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(key))
		v29 := r.Int63()
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(v29))
	case 1:
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIssue530(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIssue530(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Foo5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bar1.Size()
	n += 1 + l + sovIssue530(uint64(l))
	if m.Bar2 != nil {
		l = m.Bar2.Size()
		n += 1 + l + sovIssue530(uint64(l))
	}
	l = m.Bar3.Size()
	n += 1 + l + sovIssue530(uint64(l))
	if m.Bar4 != nil {
		l = m.Bar4.Size()
		n += 1 + l + sovIssue530(uint64(l))
	}
	if len(m.Bars1) > 0 {
		for _, e := range m.Bars1 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars2) > 0 {
		for _, e := range m.Bars2 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars3) > 0 {
		for _, e := range m.Bars3 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars4) > 0 {
		for _, e := range m.Bars4 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Barrs1) > 0 {
		for _, e := range m.Barrs1 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Barrs2) > 0 {
		for _, e := range m.Barrs2 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Barmap1) > 0 {
		for k, v := range m.Barmap1 {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovIssue530(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovIssue530(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovIssue530(uint64(mapEntrySize))
		}
	}
	if len(m.Barmap2) > 0 {
		for k, v := range m.Barmap2 {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovIssue530(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovIssue530(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovIssue530(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bar1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovIssue530(uint64(l))
	return n
}

func (m *Bar2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Str != nil {
		l = len(*m.Str)
		n += 1 + l + sovIssue530(uint64(l))
	}
	return n
}

func (m *Bar3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bars4) > 0 {
		for _, e := range m.Bars4 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars2) > 0 {
		for _, e := range m.Bars2 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	return n
}

func (m *Bar4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovIssue530(uint64(l))
	return n
}

func (m *Bar5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bars2) > 0 {
		for _, e := range m.Bars2 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars1) > 0 {
		for _, e := range m.Bars1 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	return n
}

func (m *Bar7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bars71) > 0 {
		for _, e := range m.Bars71 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	if len(m.Bars72) > 0 {
		for _, e := range m.Bars72 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	l = len(m.Str1)
	n += 1 + l + sovIssue530(uint64(l))
	if m.Str2 != nil {
		l = len(*m.Str2)
		n += 1 + l + sovIssue530(uint64(l))
	}
	return n
}

func (m *Bar8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bars1) > 0 {
		for _, e := range m.Bars1 {
			l = e.Size()
			n += 1 + l + sovIssue530(uint64(l))
		}
	}
	return n
}

func (m *Bar9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovIssue530(uint64(l))
	return n
}

func sovIssue530(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssue530(x uint64) (n int) {
	return sovIssue530(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Foo5) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBars1 := "[]Bar1{"
	for _, f := range this.Bars1 {
		repeatedStringForBars1 += strings.Replace(strings.Replace(f.String(), "Bar1", "Bar1", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBars1 += "}"
	repeatedStringForBars2 := "[]*Bar1{"
	for _, f := range this.Bars2 {
		repeatedStringForBars2 += strings.Replace(f.String(), "Bar1", "Bar1", 1) + ","
	}
	repeatedStringForBars2 += "}"
	repeatedStringForBars3 := "[]Bar2{"
	for _, f := range this.Bars3 {
		repeatedStringForBars3 += strings.Replace(strings.Replace(f.String(), "Bar2", "Bar2", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBars3 += "}"
	repeatedStringForBars4 := "[]*Bar2{"
	for _, f := range this.Bars4 {
		repeatedStringForBars4 += strings.Replace(f.String(), "Bar2", "Bar2", 1) + ","
	}
	repeatedStringForBars4 += "}"
	repeatedStringForBarrs1 := "[]Bar3{"
	for _, f := range this.Barrs1 {
		repeatedStringForBarrs1 += strings.Replace(strings.Replace(f.String(), "Bar3", "Bar3", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBarrs1 += "}"
	repeatedStringForBarrs2 := "[]Bar5{"
	for _, f := range this.Barrs2 {
		repeatedStringForBarrs2 += strings.Replace(strings.Replace(f.String(), "Bar5", "Bar5", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBarrs2 += "}"
	keysForBarmap1 := make([]string, 0, len(this.Barmap1))
	for k := range this.Barmap1 {
		keysForBarmap1 = append(keysForBarmap1, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBarmap1)
	mapStringForBarmap1 := "map[string]*Bar3{"
	for _, k := range keysForBarmap1 {
		mapStringForBarmap1 += fmt.Sprintf("%v: %v,", k, this.Barmap1[k])
	}
	mapStringForBarmap1 += "}"
	keysForBarmap2 := make([]string, 0, len(this.Barmap2))
	for k := range this.Barmap2 {
		keysForBarmap2 = append(keysForBarmap2, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBarmap2)
	mapStringForBarmap2 := "map[string]*Bar5{"
	for _, k := range keysForBarmap2 {
		mapStringForBarmap2 += fmt.Sprintf("%v: %v,", k, this.Barmap2[k])
	}
	mapStringForBarmap2 += "}"
	s := strings.Join([]string{`&Foo5{`,
		`Bar1:` + strings.Replace(strings.Replace(this.Bar1.String(), "Bar1", "Bar1", 1), `&`, ``, 1) + `,`,
		`Bar2:` + strings.Replace(this.Bar2.String(), "Bar1", "Bar1", 1) + `,`,
		`Bar3:` + strings.Replace(strings.Replace(this.Bar3.String(), "Bar2", "Bar2", 1), `&`, ``, 1) + `,`,
		`Bar4:` + strings.Replace(this.Bar4.String(), "Bar2", "Bar2", 1) + `,`,
		`Bars1:` + repeatedStringForBars1 + `,`,
		`Bars2:` + repeatedStringForBars2 + `,`,
		`Bars3:` + repeatedStringForBars3 + `,`,
		`Bars4:` + repeatedStringForBars4 + `,`,
		`Barrs1:` + repeatedStringForBarrs1 + `,`,
		`Barrs2:` + repeatedStringForBarrs2 + `,`,
		`Barmap1:` + mapStringForBarmap1 + `,`,
		`Barmap2:` + mapStringForBarmap2 + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar1{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar2{`,
		`Str:` + valueToStringIssue530(this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar3) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBars4 := "[]Bar4{"
	for _, f := range this.Bars4 {
		repeatedStringForBars4 += strings.Replace(strings.Replace(f.String(), "Bar4", "Bar4", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBars4 += "}"
	repeatedStringForBars2 := "[]Bar2{"
	for _, f := range this.Bars2 {
		repeatedStringForBars2 += strings.Replace(strings.Replace(f.String(), "Bar2", "Bar2", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBars2 += "}"
	s := strings.Join([]string{`&Bar3{`,
		`Bars4:` + repeatedStringForBars4 + `,`,
		`Bars2:` + repeatedStringForBars2 + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar4{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar5) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBars2 := "[]*Bar2{"
	for _, f := range this.Bars2 {
		repeatedStringForBars2 += strings.Replace(f.String(), "Bar2", "Bar2", 1) + ","
	}
	repeatedStringForBars2 += "}"
	repeatedStringForBars1 := "[]*Bar1{"
	for _, f := range this.Bars1 {
		repeatedStringForBars1 += strings.Replace(f.String(), "Bar1", "Bar1", 1) + ","
	}
	repeatedStringForBars1 += "}"
	s := strings.Join([]string{`&Bar5{`,
		`Bars2:` + repeatedStringForBars2 + `,`,
		`Bars1:` + repeatedStringForBars1 + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar7) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBars71 := "[]Bar7{"
	for _, f := range this.Bars71 {
		repeatedStringForBars71 += strings.Replace(strings.Replace(f.String(), "Bar7", "Bar7", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBars71 += "}"
	repeatedStringForBars72 := "[]*Bar7{"
	for _, f := range this.Bars72 {
		repeatedStringForBars72 += strings.Replace(f.String(), "Bar7", "Bar7", 1) + ","
	}
	repeatedStringForBars72 += "}"
	s := strings.Join([]string{`&Bar7{`,
		`Bars71:` + repeatedStringForBars71 + `,`,
		`Bars72:` + repeatedStringForBars72 + `,`,
		`Str1:` + fmt.Sprintf("%v", this.Str1) + `,`,
		`Str2:` + valueToStringIssue530(this.Str2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bar8) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBars1 := "[]Bar9{"
	for _, f := range this.Bars1 {
		repeatedStringForBars1 += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForBars1 += "}"
	s := strings.Join([]string{`&Bar8{`,
		`Bars1:` + repeatedStringForBars1 + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIssue530(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Foo5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Foo5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Foo5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bar1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bar2 == nil {
				m.Bar2 = &Bar1{}
			}
			if err := m.Bar2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bar3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bar4 == nil {
				m.Bar4 = &Bar2{}
			}
			if err := m.Bar4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars1 = append(m.Bars1, Bar1{})
			if err := m.Bars1[len(m.Bars1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars2 = append(m.Bars2, &Bar1{})
			if err := m.Bars2[len(m.Bars2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars3 = append(m.Bars3, Bar2{})
			if err := m.Bars3[len(m.Bars3)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars4 = append(m.Bars4, &Bar2{})
			if err := m.Bars4[len(m.Bars4)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barrs1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barrs1 = append(m.Barrs1, Bar3{})
			if err := m.Barrs1[len(m.Barrs1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barrs2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barrs2 = append(m.Barrs2, Bar5{})
			if err := m.Barrs2[len(m.Barrs2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barmap1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barmap1 == nil {
				m.Barmap1 = make(map[string]*Bar3)
			}
			var mapkey string
			var mapvalue *Bar3
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIssue530
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssue530
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIssue530
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIssue530
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssue530
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthIssue530
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthIssue530
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bar3{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIssue530(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthIssue530
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Barmap1[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barmap2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barmap2 == nil {
				m.Barmap2 = make(map[string]*Bar5)
			}
			var mapkey string
			var mapvalue *Bar5
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIssue530
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssue530
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIssue530
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIssue530
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssue530
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthIssue530
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthIssue530
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bar5{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIssue530(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthIssue530
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Barmap2[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Str = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars4 = append(m.Bars4, Bar4{})
			if err := m.Bars4[len(m.Bars4)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars2 = append(m.Bars2, Bar2{})
			if err := m.Bars2[len(m.Bars2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars2 = append(m.Bars2, &Bar2{})
			if err := m.Bars2[len(m.Bars2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars1 = append(m.Bars1, &Bar1{})
			if err := m.Bars1[len(m.Bars1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars71", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars71 = append(m.Bars71, Bar7{})
			if err := m.Bars71[len(m.Bars71)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars72", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars72 = append(m.Bars72, &Bar7{})
			if err := m.Bars72[len(m.Bars72)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Str2 = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar8) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar8: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar8: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bars1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bars1 = append(m.Bars1, Bar9{})
			if err := m.Bars1[len(m.Bars1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bar9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue530
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue530
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue530(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue530
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssue530(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssue530
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue530
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssue530
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssue530
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssue530
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssue530        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssue530          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssue530 = fmt.Errorf("proto: unexpected end of group")
)
