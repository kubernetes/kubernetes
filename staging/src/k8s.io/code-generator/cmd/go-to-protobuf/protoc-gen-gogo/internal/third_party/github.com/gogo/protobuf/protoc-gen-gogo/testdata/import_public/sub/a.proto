// Go support for Protocol Buffers - Google's data interchange format
//
// Copyright 2018 The Go Authors.  All rights reserved.
// https://github.com/golang/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package goproto.test.import_public.sub;

option go_package = "github.com/gogo/protobuf/protoc-gen-gogo/testdata/import_public/sub";

import "import_public/sub/b.proto";

message M {
  // Field using a type in the same Go package, but a different source file.
  optional M2 m2 = 1;

  oneof oneof_field {
    int32 oneof_int32 = 2;
    int64 oneof_int64 = 3;
  }

  optional group Grouping = 4  {
    optional string group_field = 5;
  }

  optional string default_field = 6 [default="def"];

  message Submessage {
    enum Submessage_Subenum {
      M_SUBMESSAGE_ZERO = 0;
    }

    oneof submessage_oneof_field {
      int32 submessage_oneof_int32 = 1;
      int64 submessage_oneof_int64 = 2;
    }
  }

  enum Subenum {
    M_ZERO = 0;
  }
}

enum E {
  ZERO = 0;
}

extend M2 {
  optional string extension_field = 1;
}