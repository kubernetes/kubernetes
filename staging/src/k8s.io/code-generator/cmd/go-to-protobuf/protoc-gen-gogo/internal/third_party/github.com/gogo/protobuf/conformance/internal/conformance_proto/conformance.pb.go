// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/conformance_proto/conformance.proto

package conformance

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WireFormat int32

const (
	WireFormat_UNSPECIFIED WireFormat = 0
	WireFormat_PROTOBUF    WireFormat = 1
	WireFormat_JSON        WireFormat = 2
)

var WireFormat_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PROTOBUF",
	2: "JSON",
}

var WireFormat_value = map[string]int32{
	"UNSPECIFIED": 0,
	"PROTOBUF":    1,
	"JSON":        2,
}

func (x WireFormat) String() string {
	return proto.EnumName(WireFormat_name, int32(x))
}

func (WireFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{0}
}

type ForeignEnum int32

const (
	ForeignEnum_FOREIGN_FOO ForeignEnum = 0
	ForeignEnum_FOREIGN_BAR ForeignEnum = 1
	ForeignEnum_FOREIGN_BAZ ForeignEnum = 2
)

var ForeignEnum_name = map[int32]string{
	0: "FOREIGN_FOO",
	1: "FOREIGN_BAR",
	2: "FOREIGN_BAZ",
}

var ForeignEnum_value = map[string]int32{
	"FOREIGN_FOO": 0,
	"FOREIGN_BAR": 1,
	"FOREIGN_BAZ": 2,
}

func (x ForeignEnum) String() string {
	return proto.EnumName(ForeignEnum_name, int32(x))
}

func (ForeignEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{1}
}

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_FOO TestAllTypes_NestedEnum = 0
	TestAllTypes_BAR TestAllTypes_NestedEnum = 1
	TestAllTypes_BAZ TestAllTypes_NestedEnum = 2
	TestAllTypes_NEG TestAllTypes_NestedEnum = -1
)

var TestAllTypes_NestedEnum_name = map[int32]string{
	0:  "FOO",
	1:  "BAR",
	2:  "BAZ",
	-1: "NEG",
}

var TestAllTypes_NestedEnum_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
	"BAZ": 2,
	"NEG": -1,
}

func (x TestAllTypes_NestedEnum) String() string {
	return proto.EnumName(TestAllTypes_NestedEnum_name, int32(x))
}

func (TestAllTypes_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{2, 0}
}

// Represents a single test case's input.  The testee should:
//
//   1. parse this proto (which should always succeed)
//   2. parse the protobuf or JSON payload in "payload" (which may fail)
//   3. if the parse succeeded, serialize the message in the requested format.
type ConformanceRequest struct {
	// The payload (whether protobuf of JSON) is always for a TestAllTypes proto
	// (see below).
	//
	// Types that are valid to be assigned to Payload:
	//	*ConformanceRequest_ProtobufPayload
	//	*ConformanceRequest_JsonPayload
	Payload isConformanceRequest_Payload `protobuf_oneof:"payload"`
	// Which format should the testee serialize its message to?
	RequestedOutputFormat WireFormat `protobuf:"varint,3,opt,name=requested_output_format,json=requestedOutputFormat,proto3,enum=conformance.WireFormat" json:"requested_output_format,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-"`
	XXX_unrecognized      []byte     `json:"-"`
	XXX_sizecache         int32      `json:"-"`
}

func (m *ConformanceRequest) Reset()         { *m = ConformanceRequest{} }
func (m *ConformanceRequest) String() string { return proto.CompactTextString(m) }
func (*ConformanceRequest) ProtoMessage()    {}
func (*ConformanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{0}
}
func (m *ConformanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConformanceRequest.Unmarshal(m, b)
}
func (m *ConformanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConformanceRequest.Marshal(b, m, deterministic)
}
func (m *ConformanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConformanceRequest.Merge(m, src)
}
func (m *ConformanceRequest) XXX_Size() int {
	return xxx_messageInfo_ConformanceRequest.Size(m)
}
func (m *ConformanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConformanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConformanceRequest proto.InternalMessageInfo

type isConformanceRequest_Payload interface {
	isConformanceRequest_Payload()
}

type ConformanceRequest_ProtobufPayload struct {
	ProtobufPayload []byte `protobuf:"bytes,1,opt,name=protobuf_payload,json=protobufPayload,proto3,oneof" json:"protobuf_payload,omitempty"`
}
type ConformanceRequest_JsonPayload struct {
	JsonPayload string `protobuf:"bytes,2,opt,name=json_payload,json=jsonPayload,proto3,oneof" json:"json_payload,omitempty"`
}

func (*ConformanceRequest_ProtobufPayload) isConformanceRequest_Payload() {}
func (*ConformanceRequest_JsonPayload) isConformanceRequest_Payload()     {}

func (m *ConformanceRequest) GetPayload() isConformanceRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ConformanceRequest) GetProtobufPayload() []byte {
	if x, ok := m.GetPayload().(*ConformanceRequest_ProtobufPayload); ok {
		return x.ProtobufPayload
	}
	return nil
}

func (m *ConformanceRequest) GetJsonPayload() string {
	if x, ok := m.GetPayload().(*ConformanceRequest_JsonPayload); ok {
		return x.JsonPayload
	}
	return ""
}

func (m *ConformanceRequest) GetRequestedOutputFormat() WireFormat {
	if m != nil {
		return m.RequestedOutputFormat
	}
	return WireFormat_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConformanceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConformanceRequest_ProtobufPayload)(nil),
		(*ConformanceRequest_JsonPayload)(nil),
	}
}

// Represents a single test case's output.
type ConformanceResponse struct {
	// Types that are valid to be assigned to Result:
	//	*ConformanceResponse_ParseError
	//	*ConformanceResponse_SerializeError
	//	*ConformanceResponse_RuntimeError
	//	*ConformanceResponse_ProtobufPayload
	//	*ConformanceResponse_JsonPayload
	//	*ConformanceResponse_Skipped
	Result               isConformanceResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ConformanceResponse) Reset()         { *m = ConformanceResponse{} }
func (m *ConformanceResponse) String() string { return proto.CompactTextString(m) }
func (*ConformanceResponse) ProtoMessage()    {}
func (*ConformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{1}
}
func (m *ConformanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConformanceResponse.Unmarshal(m, b)
}
func (m *ConformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConformanceResponse.Marshal(b, m, deterministic)
}
func (m *ConformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConformanceResponse.Merge(m, src)
}
func (m *ConformanceResponse) XXX_Size() int {
	return xxx_messageInfo_ConformanceResponse.Size(m)
}
func (m *ConformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConformanceResponse proto.InternalMessageInfo

type isConformanceResponse_Result interface {
	isConformanceResponse_Result()
}

type ConformanceResponse_ParseError struct {
	ParseError string `protobuf:"bytes,1,opt,name=parse_error,json=parseError,proto3,oneof" json:"parse_error,omitempty"`
}
type ConformanceResponse_SerializeError struct {
	SerializeError string `protobuf:"bytes,6,opt,name=serialize_error,json=serializeError,proto3,oneof" json:"serialize_error,omitempty"`
}
type ConformanceResponse_RuntimeError struct {
	RuntimeError string `protobuf:"bytes,2,opt,name=runtime_error,json=runtimeError,proto3,oneof" json:"runtime_error,omitempty"`
}
type ConformanceResponse_ProtobufPayload struct {
	ProtobufPayload []byte `protobuf:"bytes,3,opt,name=protobuf_payload,json=protobufPayload,proto3,oneof" json:"protobuf_payload,omitempty"`
}
type ConformanceResponse_JsonPayload struct {
	JsonPayload string `protobuf:"bytes,4,opt,name=json_payload,json=jsonPayload,proto3,oneof" json:"json_payload,omitempty"`
}
type ConformanceResponse_Skipped struct {
	Skipped string `protobuf:"bytes,5,opt,name=skipped,proto3,oneof" json:"skipped,omitempty"`
}

func (*ConformanceResponse_ParseError) isConformanceResponse_Result()      {}
func (*ConformanceResponse_SerializeError) isConformanceResponse_Result()  {}
func (*ConformanceResponse_RuntimeError) isConformanceResponse_Result()    {}
func (*ConformanceResponse_ProtobufPayload) isConformanceResponse_Result() {}
func (*ConformanceResponse_JsonPayload) isConformanceResponse_Result()     {}
func (*ConformanceResponse_Skipped) isConformanceResponse_Result()         {}

func (m *ConformanceResponse) GetResult() isConformanceResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ConformanceResponse) GetParseError() string {
	if x, ok := m.GetResult().(*ConformanceResponse_ParseError); ok {
		return x.ParseError
	}
	return ""
}

func (m *ConformanceResponse) GetSerializeError() string {
	if x, ok := m.GetResult().(*ConformanceResponse_SerializeError); ok {
		return x.SerializeError
	}
	return ""
}

func (m *ConformanceResponse) GetRuntimeError() string {
	if x, ok := m.GetResult().(*ConformanceResponse_RuntimeError); ok {
		return x.RuntimeError
	}
	return ""
}

func (m *ConformanceResponse) GetProtobufPayload() []byte {
	if x, ok := m.GetResult().(*ConformanceResponse_ProtobufPayload); ok {
		return x.ProtobufPayload
	}
	return nil
}

func (m *ConformanceResponse) GetJsonPayload() string {
	if x, ok := m.GetResult().(*ConformanceResponse_JsonPayload); ok {
		return x.JsonPayload
	}
	return ""
}

func (m *ConformanceResponse) GetSkipped() string {
	if x, ok := m.GetResult().(*ConformanceResponse_Skipped); ok {
		return x.Skipped
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConformanceResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConformanceResponse_ParseError)(nil),
		(*ConformanceResponse_SerializeError)(nil),
		(*ConformanceResponse_RuntimeError)(nil),
		(*ConformanceResponse_ProtobufPayload)(nil),
		(*ConformanceResponse_JsonPayload)(nil),
		(*ConformanceResponse_Skipped)(nil),
	}
}

// This proto includes every type of field in both singular and repeated
// forms.
type TestAllTypes struct {
	// Singular
	OptionalInt32          int32                       `protobuf:"varint,1,opt,name=optional_int32,json=optionalInt32,proto3" json:"optional_int32,omitempty"`
	OptionalInt64          int64                       `protobuf:"varint,2,opt,name=optional_int64,json=optionalInt64,proto3" json:"optional_int64,omitempty"`
	OptionalUint32         uint32                      `protobuf:"varint,3,opt,name=optional_uint32,json=optionalUint32,proto3" json:"optional_uint32,omitempty"`
	OptionalUint64         uint64                      `protobuf:"varint,4,opt,name=optional_uint64,json=optionalUint64,proto3" json:"optional_uint64,omitempty"`
	OptionalSint32         int32                       `protobuf:"zigzag32,5,opt,name=optional_sint32,json=optionalSint32,proto3" json:"optional_sint32,omitempty"`
	OptionalSint64         int64                       `protobuf:"zigzag64,6,opt,name=optional_sint64,json=optionalSint64,proto3" json:"optional_sint64,omitempty"`
	OptionalFixed32        uint32                      `protobuf:"fixed32,7,opt,name=optional_fixed32,json=optionalFixed32,proto3" json:"optional_fixed32,omitempty"`
	OptionalFixed64        uint64                      `protobuf:"fixed64,8,opt,name=optional_fixed64,json=optionalFixed64,proto3" json:"optional_fixed64,omitempty"`
	OptionalSfixed32       int32                       `protobuf:"fixed32,9,opt,name=optional_sfixed32,json=optionalSfixed32,proto3" json:"optional_sfixed32,omitempty"`
	OptionalSfixed64       int64                       `protobuf:"fixed64,10,opt,name=optional_sfixed64,json=optionalSfixed64,proto3" json:"optional_sfixed64,omitempty"`
	OptionalFloat          float32                     `protobuf:"fixed32,11,opt,name=optional_float,json=optionalFloat,proto3" json:"optional_float,omitempty"`
	OptionalDouble         float64                     `protobuf:"fixed64,12,opt,name=optional_double,json=optionalDouble,proto3" json:"optional_double,omitempty"`
	OptionalBool           bool                        `protobuf:"varint,13,opt,name=optional_bool,json=optionalBool,proto3" json:"optional_bool,omitempty"`
	OptionalString         string                      `protobuf:"bytes,14,opt,name=optional_string,json=optionalString,proto3" json:"optional_string,omitempty"`
	OptionalBytes          []byte                      `protobuf:"bytes,15,opt,name=optional_bytes,json=optionalBytes,proto3" json:"optional_bytes,omitempty"`
	OptionalNestedMessage  *TestAllTypes_NestedMessage `protobuf:"bytes,18,opt,name=optional_nested_message,json=optionalNestedMessage,proto3" json:"optional_nested_message,omitempty"`
	OptionalForeignMessage *ForeignMessage             `protobuf:"bytes,19,opt,name=optional_foreign_message,json=optionalForeignMessage,proto3" json:"optional_foreign_message,omitempty"`
	OptionalNestedEnum     TestAllTypes_NestedEnum     `protobuf:"varint,21,opt,name=optional_nested_enum,json=optionalNestedEnum,proto3,enum=conformance.TestAllTypes_NestedEnum" json:"optional_nested_enum,omitempty"`
	OptionalForeignEnum    ForeignEnum                 `protobuf:"varint,22,opt,name=optional_foreign_enum,json=optionalForeignEnum,proto3,enum=conformance.ForeignEnum" json:"optional_foreign_enum,omitempty"`
	OptionalStringPiece    string                      `protobuf:"bytes,24,opt,name=optional_string_piece,json=optionalStringPiece,proto3" json:"optional_string_piece,omitempty"`
	OptionalCord           string                      `protobuf:"bytes,25,opt,name=optional_cord,json=optionalCord,proto3" json:"optional_cord,omitempty"`
	RecursiveMessage       *TestAllTypes               `protobuf:"bytes,27,opt,name=recursive_message,json=recursiveMessage,proto3" json:"recursive_message,omitempty"`
	// Repeated
	RepeatedInt32          []int32                       `protobuf:"varint,31,rep,packed,name=repeated_int32,json=repeatedInt32,proto3" json:"repeated_int32,omitempty"`
	RepeatedInt64          []int64                       `protobuf:"varint,32,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedUint32         []uint32                      `protobuf:"varint,33,rep,packed,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedUint64         []uint64                      `protobuf:"varint,34,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedSint32         []int32                       `protobuf:"zigzag32,35,rep,packed,name=repeated_sint32,json=repeatedSint32,proto3" json:"repeated_sint32,omitempty"`
	RepeatedSint64         []int64                       `protobuf:"zigzag64,36,rep,packed,name=repeated_sint64,json=repeatedSint64,proto3" json:"repeated_sint64,omitempty"`
	RepeatedFixed32        []uint32                      `protobuf:"fixed32,37,rep,packed,name=repeated_fixed32,json=repeatedFixed32,proto3" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64        []uint64                      `protobuf:"fixed64,38,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32       []int32                       `protobuf:"fixed32,39,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32,proto3" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64       []int64                       `protobuf:"fixed64,40,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat          []float32                     `protobuf:"fixed32,41,rep,packed,name=repeated_float,json=repeatedFloat,proto3" json:"repeated_float,omitempty"`
	RepeatedDouble         []float64                     `protobuf:"fixed64,42,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
	RepeatedBool           []bool                        `protobuf:"varint,43,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedString         []string                      `protobuf:"bytes,44,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedBytes          [][]byte                      `protobuf:"bytes,45,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	RepeatedNestedMessage  []*TestAllTypes_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message,json=repeatedNestedMessage,proto3" json:"repeated_nested_message,omitempty"`
	RepeatedForeignMessage []*ForeignMessage             `protobuf:"bytes,49,rep,name=repeated_foreign_message,json=repeatedForeignMessage,proto3" json:"repeated_foreign_message,omitempty"`
	RepeatedNestedEnum     []TestAllTypes_NestedEnum     `protobuf:"varint,51,rep,packed,name=repeated_nested_enum,json=repeatedNestedEnum,proto3,enum=conformance.TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedForeignEnum    []ForeignEnum                 `protobuf:"varint,52,rep,packed,name=repeated_foreign_enum,json=repeatedForeignEnum,proto3,enum=conformance.ForeignEnum" json:"repeated_foreign_enum,omitempty"`
	RepeatedStringPiece    []string                      `protobuf:"bytes,54,rep,name=repeated_string_piece,json=repeatedStringPiece,proto3" json:"repeated_string_piece,omitempty"`
	RepeatedCord           []string                      `protobuf:"bytes,55,rep,name=repeated_cord,json=repeatedCord,proto3" json:"repeated_cord,omitempty"`
	// Map
	MapInt32Int32           map[int32]int32                        `protobuf:"bytes,56,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Int64           map[int64]int64                        `protobuf:"bytes,57,rep,name=map_int64_int64,json=mapInt64Int64,proto3" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Uint32         map[uint32]uint32                      `protobuf:"bytes,58,rep,name=map_uint32_uint32,json=mapUint32Uint32,proto3" json:"map_uint32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Uint64         map[uint64]uint64                      `protobuf:"bytes,59,rep,name=map_uint64_uint64,json=mapUint64Uint64,proto3" json:"map_uint64_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Sint32         map[int32]int32                        `protobuf:"bytes,60,rep,name=map_sint32_sint32,json=mapSint32Sint32,proto3" json:"map_sint32_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapSint64Sint64         map[int64]int64                        `protobuf:"bytes,61,rep,name=map_sint64_sint64,json=mapSint64Sint64,proto3" json:"map_sint64_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapFixed32Fixed32       map[uint32]uint32                      `protobuf:"bytes,62,rep,name=map_fixed32_fixed32,json=mapFixed32Fixed32,proto3" json:"map_fixed32_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapFixed64Fixed64       map[uint64]uint64                      `protobuf:"bytes,63,rep,name=map_fixed64_fixed64,json=mapFixed64Fixed64,proto3" json:"map_fixed64_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapSfixed32Sfixed32     map[int32]int32                        `protobuf:"bytes,64,rep,name=map_sfixed32_sfixed32,json=mapSfixed32Sfixed32,proto3" json:"map_sfixed32_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapSfixed64Sfixed64     map[int64]int64                        `protobuf:"bytes,65,rep,name=map_sfixed64_sfixed64,json=mapSfixed64Sfixed64,proto3" json:"map_sfixed64_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float           map[int32]float32                      `protobuf:"bytes,66,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Double          map[int32]float64                      `protobuf:"bytes,67,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapBoolBool             map[bool]bool                          `protobuf:"bytes,68,rep,name=map_bool_bool,json=mapBoolBool,proto3" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringString         map[string]string                      `protobuf:"bytes,69,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringBytes          map[string][]byte                      `protobuf:"bytes,70,rep,name=map_string_bytes,json=mapStringBytes,proto3" json:"map_string_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringNestedMessage  map[string]*TestAllTypes_NestedMessage `protobuf:"bytes,71,rep,name=map_string_nested_message,json=mapStringNestedMessage,proto3" json:"map_string_nested_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringForeignMessage map[string]*ForeignMessage             `protobuf:"bytes,72,rep,name=map_string_foreign_message,json=mapStringForeignMessage,proto3" json:"map_string_foreign_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringNestedEnum     map[string]TestAllTypes_NestedEnum     `protobuf:"bytes,73,rep,name=map_string_nested_enum,json=mapStringNestedEnum,proto3" json:"map_string_nested_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=conformance.TestAllTypes_NestedEnum"`
	MapStringForeignEnum    map[string]ForeignEnum                 `protobuf:"bytes,74,rep,name=map_string_foreign_enum,json=mapStringForeignEnum,proto3" json:"map_string_foreign_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=conformance.ForeignEnum"`
	// Types that are valid to be assigned to OneofField:
	//	*TestAllTypes_OneofUint32
	//	*TestAllTypes_OneofNestedMessage
	//	*TestAllTypes_OneofString
	//	*TestAllTypes_OneofBytes
	OneofField isTestAllTypes_OneofField `protobuf_oneof:"oneof_field"`
	// Well-known types
	OptionalBoolWrapper   *types.BoolValue     `protobuf:"bytes,201,opt,name=optional_bool_wrapper,json=optionalBoolWrapper,proto3" json:"optional_bool_wrapper,omitempty"`
	OptionalInt32Wrapper  *types.Int32Value    `protobuf:"bytes,202,opt,name=optional_int32_wrapper,json=optionalInt32Wrapper,proto3" json:"optional_int32_wrapper,omitempty"`
	OptionalInt64Wrapper  *types.Int64Value    `protobuf:"bytes,203,opt,name=optional_int64_wrapper,json=optionalInt64Wrapper,proto3" json:"optional_int64_wrapper,omitempty"`
	OptionalUint32Wrapper *types.UInt32Value   `protobuf:"bytes,204,opt,name=optional_uint32_wrapper,json=optionalUint32Wrapper,proto3" json:"optional_uint32_wrapper,omitempty"`
	OptionalUint64Wrapper *types.UInt64Value   `protobuf:"bytes,205,opt,name=optional_uint64_wrapper,json=optionalUint64Wrapper,proto3" json:"optional_uint64_wrapper,omitempty"`
	OptionalFloatWrapper  *types.FloatValue    `protobuf:"bytes,206,opt,name=optional_float_wrapper,json=optionalFloatWrapper,proto3" json:"optional_float_wrapper,omitempty"`
	OptionalDoubleWrapper *types.DoubleValue   `protobuf:"bytes,207,opt,name=optional_double_wrapper,json=optionalDoubleWrapper,proto3" json:"optional_double_wrapper,omitempty"`
	OptionalStringWrapper *types.StringValue   `protobuf:"bytes,208,opt,name=optional_string_wrapper,json=optionalStringWrapper,proto3" json:"optional_string_wrapper,omitempty"`
	OptionalBytesWrapper  *types.BytesValue    `protobuf:"bytes,209,opt,name=optional_bytes_wrapper,json=optionalBytesWrapper,proto3" json:"optional_bytes_wrapper,omitempty"`
	RepeatedBoolWrapper   []*types.BoolValue   `protobuf:"bytes,211,rep,name=repeated_bool_wrapper,json=repeatedBoolWrapper,proto3" json:"repeated_bool_wrapper,omitempty"`
	RepeatedInt32Wrapper  []*types.Int32Value  `protobuf:"bytes,212,rep,name=repeated_int32_wrapper,json=repeatedInt32Wrapper,proto3" json:"repeated_int32_wrapper,omitempty"`
	RepeatedInt64Wrapper  []*types.Int64Value  `protobuf:"bytes,213,rep,name=repeated_int64_wrapper,json=repeatedInt64Wrapper,proto3" json:"repeated_int64_wrapper,omitempty"`
	RepeatedUint32Wrapper []*types.UInt32Value `protobuf:"bytes,214,rep,name=repeated_uint32_wrapper,json=repeatedUint32Wrapper,proto3" json:"repeated_uint32_wrapper,omitempty"`
	RepeatedUint64Wrapper []*types.UInt64Value `protobuf:"bytes,215,rep,name=repeated_uint64_wrapper,json=repeatedUint64Wrapper,proto3" json:"repeated_uint64_wrapper,omitempty"`
	RepeatedFloatWrapper  []*types.FloatValue  `protobuf:"bytes,216,rep,name=repeated_float_wrapper,json=repeatedFloatWrapper,proto3" json:"repeated_float_wrapper,omitempty"`
	RepeatedDoubleWrapper []*types.DoubleValue `protobuf:"bytes,217,rep,name=repeated_double_wrapper,json=repeatedDoubleWrapper,proto3" json:"repeated_double_wrapper,omitempty"`
	RepeatedStringWrapper []*types.StringValue `protobuf:"bytes,218,rep,name=repeated_string_wrapper,json=repeatedStringWrapper,proto3" json:"repeated_string_wrapper,omitempty"`
	RepeatedBytesWrapper  []*types.BytesValue  `protobuf:"bytes,219,rep,name=repeated_bytes_wrapper,json=repeatedBytesWrapper,proto3" json:"repeated_bytes_wrapper,omitempty"`
	OptionalDuration      *types.Duration      `protobuf:"bytes,301,opt,name=optional_duration,json=optionalDuration,proto3" json:"optional_duration,omitempty"`
	OptionalTimestamp     *types.Timestamp     `protobuf:"bytes,302,opt,name=optional_timestamp,json=optionalTimestamp,proto3" json:"optional_timestamp,omitempty"`
	OptionalFieldMask     *types.FieldMask     `protobuf:"bytes,303,opt,name=optional_field_mask,json=optionalFieldMask,proto3" json:"optional_field_mask,omitempty"`
	OptionalStruct        *types.Struct        `protobuf:"bytes,304,opt,name=optional_struct,json=optionalStruct,proto3" json:"optional_struct,omitempty"`
	OptionalAny           *types.Any           `protobuf:"bytes,305,opt,name=optional_any,json=optionalAny,proto3" json:"optional_any,omitempty"`
	OptionalValue         *types.Value         `protobuf:"bytes,306,opt,name=optional_value,json=optionalValue,proto3" json:"optional_value,omitempty"`
	RepeatedDuration      []*types.Duration    `protobuf:"bytes,311,rep,name=repeated_duration,json=repeatedDuration,proto3" json:"repeated_duration,omitempty"`
	RepeatedTimestamp     []*types.Timestamp   `protobuf:"bytes,312,rep,name=repeated_timestamp,json=repeatedTimestamp,proto3" json:"repeated_timestamp,omitempty"`
	RepeatedFieldmask     []*types.FieldMask   `protobuf:"bytes,313,rep,name=repeated_fieldmask,json=repeatedFieldmask,proto3" json:"repeated_fieldmask,omitempty"`
	RepeatedStruct        []*types.Struct      `protobuf:"bytes,324,rep,name=repeated_struct,json=repeatedStruct,proto3" json:"repeated_struct,omitempty"`
	RepeatedAny           []*types.Any         `protobuf:"bytes,315,rep,name=repeated_any,json=repeatedAny,proto3" json:"repeated_any,omitempty"`
	RepeatedValue         []*types.Value       `protobuf:"bytes,316,rep,name=repeated_value,json=repeatedValue,proto3" json:"repeated_value,omitempty"`
	// Test field-name-to-JSON-name convention.
	Fieldname1           int32    `protobuf:"varint,401,opt,name=fieldname1,proto3" json:"fieldname1,omitempty"`
	FieldName2           int32    `protobuf:"varint,402,opt,name=field_name2,json=fieldName2,proto3" json:"field_name2,omitempty"`
	XFieldName3          int32    `protobuf:"varint,403,opt,name=_field_name3,json=FieldName3,proto3" json:"_field_name3,omitempty"`
	Field_Name4_         int32    `protobuf:"varint,404,opt,name=field__name4_,json=fieldName4,proto3" json:"field__name4_,omitempty"`
	Field0Name5          int32    `protobuf:"varint,405,opt,name=field0name5,proto3" json:"field0name5,omitempty"`
	Field_0Name6         int32    `protobuf:"varint,406,opt,name=field_0_name6,json=field0Name6,proto3" json:"field_0_name6,omitempty"`
	FieldName7           int32    `protobuf:"varint,407,opt,name=fieldName7,proto3" json:"fieldName7,omitempty"`
	FieldName8           int32    `protobuf:"varint,408,opt,name=FieldName8,proto3" json:"FieldName8,omitempty"`
	Field_Name9          int32    `protobuf:"varint,409,opt,name=field_Name9,json=fieldName9,proto3" json:"field_Name9,omitempty"`
	Field_Name10         int32    `protobuf:"varint,410,opt,name=Field_Name10,json=FieldName10,proto3" json:"Field_Name10,omitempty"`
	FIELD_NAME11         int32    `protobuf:"varint,411,opt,name=FIELD_NAME11,json=FIELDNAME11,proto3" json:"FIELD_NAME11,omitempty"`
	FIELDName12          int32    `protobuf:"varint,412,opt,name=FIELD_name12,json=FIELDName12,proto3" json:"FIELD_name12,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestAllTypes) Reset()         { *m = TestAllTypes{} }
func (m *TestAllTypes) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes) ProtoMessage()    {}
func (*TestAllTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{2}
}
func (m *TestAllTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes.Unmarshal(m, b)
}
func (m *TestAllTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes.Marshal(b, m, deterministic)
}
func (m *TestAllTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes.Merge(m, src)
}
func (m *TestAllTypes) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes.Size(m)
}
func (m *TestAllTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes proto.InternalMessageInfo

type isTestAllTypes_OneofField interface {
	isTestAllTypes_OneofField()
}

type TestAllTypes_OneofUint32 struct {
	OneofUint32 uint32 `protobuf:"varint,111,opt,name=oneof_uint32,json=oneofUint32,proto3,oneof" json:"oneof_uint32,omitempty"`
}
type TestAllTypes_OneofNestedMessage struct {
	OneofNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,112,opt,name=oneof_nested_message,json=oneofNestedMessage,proto3,oneof" json:"oneof_nested_message,omitempty"`
}
type TestAllTypes_OneofString struct {
	OneofString string `protobuf:"bytes,113,opt,name=oneof_string,json=oneofString,proto3,oneof" json:"oneof_string,omitempty"`
}
type TestAllTypes_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,114,opt,name=oneof_bytes,json=oneofBytes,proto3,oneof" json:"oneof_bytes,omitempty"`
}

func (*TestAllTypes_OneofUint32) isTestAllTypes_OneofField()        {}
func (*TestAllTypes_OneofNestedMessage) isTestAllTypes_OneofField() {}
func (*TestAllTypes_OneofString) isTestAllTypes_OneofField()        {}
func (*TestAllTypes_OneofBytes) isTestAllTypes_OneofField()         {}

func (m *TestAllTypes) GetOneofField() isTestAllTypes_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (m *TestAllTypes) GetOptionalInt32() int32 {
	if m != nil {
		return m.OptionalInt32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalInt64() int64 {
	if m != nil {
		return m.OptionalInt64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalUint32() uint32 {
	if m != nil {
		return m.OptionalUint32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalUint64() uint64 {
	if m != nil {
		return m.OptionalUint64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSint32() int32 {
	if m != nil {
		return m.OptionalSint32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSint64() int64 {
	if m != nil {
		return m.OptionalSint64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFixed32() uint32 {
	if m != nil {
		return m.OptionalFixed32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFixed64() uint64 {
	if m != nil {
		return m.OptionalFixed64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSfixed32() int32 {
	if m != nil {
		return m.OptionalSfixed32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSfixed64() int64 {
	if m != nil {
		return m.OptionalSfixed64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFloat() float32 {
	if m != nil {
		return m.OptionalFloat
	}
	return 0
}

func (m *TestAllTypes) GetOptionalDouble() float64 {
	if m != nil {
		return m.OptionalDouble
	}
	return 0
}

func (m *TestAllTypes) GetOptionalBool() bool {
	if m != nil {
		return m.OptionalBool
	}
	return false
}

func (m *TestAllTypes) GetOptionalString() string {
	if m != nil {
		return m.OptionalString
	}
	return ""
}

func (m *TestAllTypes) GetOptionalBytes() []byte {
	if m != nil {
		return m.OptionalBytes
	}
	return nil
}

func (m *TestAllTypes) GetOptionalNestedMessage() *TestAllTypes_NestedMessage {
	if m != nil {
		return m.OptionalNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetOptionalForeignMessage() *ForeignMessage {
	if m != nil {
		return m.OptionalForeignMessage
	}
	return nil
}

func (m *TestAllTypes) GetOptionalNestedEnum() TestAllTypes_NestedEnum {
	if m != nil {
		return m.OptionalNestedEnum
	}
	return TestAllTypes_FOO
}

func (m *TestAllTypes) GetOptionalForeignEnum() ForeignEnum {
	if m != nil {
		return m.OptionalForeignEnum
	}
	return ForeignEnum_FOREIGN_FOO
}

func (m *TestAllTypes) GetOptionalStringPiece() string {
	if m != nil {
		return m.OptionalStringPiece
	}
	return ""
}

func (m *TestAllTypes) GetOptionalCord() string {
	if m != nil {
		return m.OptionalCord
	}
	return ""
}

func (m *TestAllTypes) GetRecursiveMessage() *TestAllTypes {
	if m != nil {
		return m.RecursiveMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedForeignMessage() []*ForeignMessage {
	if m != nil {
		return m.RepeatedForeignMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if m != nil {
		return m.RepeatedNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedForeignEnum() []ForeignEnum {
	if m != nil {
		return m.RepeatedForeignEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedStringPiece() []string {
	if m != nil {
		return m.RepeatedStringPiece
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedCord() []string {
	if m != nil {
		return m.RepeatedCord
	}
	return nil
}

func (m *TestAllTypes) GetMapInt32Int32() map[int32]int32 {
	if m != nil {
		return m.MapInt32Int32
	}
	return nil
}

func (m *TestAllTypes) GetMapInt64Int64() map[int64]int64 {
	if m != nil {
		return m.MapInt64Int64
	}
	return nil
}

func (m *TestAllTypes) GetMapUint32Uint32() map[uint32]uint32 {
	if m != nil {
		return m.MapUint32Uint32
	}
	return nil
}

func (m *TestAllTypes) GetMapUint64Uint64() map[uint64]uint64 {
	if m != nil {
		return m.MapUint64Uint64
	}
	return nil
}

func (m *TestAllTypes) GetMapSint32Sint32() map[int32]int32 {
	if m != nil {
		return m.MapSint32Sint32
	}
	return nil
}

func (m *TestAllTypes) GetMapSint64Sint64() map[int64]int64 {
	if m != nil {
		return m.MapSint64Sint64
	}
	return nil
}

func (m *TestAllTypes) GetMapFixed32Fixed32() map[uint32]uint32 {
	if m != nil {
		return m.MapFixed32Fixed32
	}
	return nil
}

func (m *TestAllTypes) GetMapFixed64Fixed64() map[uint64]uint64 {
	if m != nil {
		return m.MapFixed64Fixed64
	}
	return nil
}

func (m *TestAllTypes) GetMapSfixed32Sfixed32() map[int32]int32 {
	if m != nil {
		return m.MapSfixed32Sfixed32
	}
	return nil
}

func (m *TestAllTypes) GetMapSfixed64Sfixed64() map[int64]int64 {
	if m != nil {
		return m.MapSfixed64Sfixed64
	}
	return nil
}

func (m *TestAllTypes) GetMapInt32Float() map[int32]float32 {
	if m != nil {
		return m.MapInt32Float
	}
	return nil
}

func (m *TestAllTypes) GetMapInt32Double() map[int32]float64 {
	if m != nil {
		return m.MapInt32Double
	}
	return nil
}

func (m *TestAllTypes) GetMapBoolBool() map[bool]bool {
	if m != nil {
		return m.MapBoolBool
	}
	return nil
}

func (m *TestAllTypes) GetMapStringString() map[string]string {
	if m != nil {
		return m.MapStringString
	}
	return nil
}

func (m *TestAllTypes) GetMapStringBytes() map[string][]byte {
	if m != nil {
		return m.MapStringBytes
	}
	return nil
}

func (m *TestAllTypes) GetMapStringNestedMessage() map[string]*TestAllTypes_NestedMessage {
	if m != nil {
		return m.MapStringNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetMapStringForeignMessage() map[string]*ForeignMessage {
	if m != nil {
		return m.MapStringForeignMessage
	}
	return nil
}

func (m *TestAllTypes) GetMapStringNestedEnum() map[string]TestAllTypes_NestedEnum {
	if m != nil {
		return m.MapStringNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetMapStringForeignEnum() map[string]ForeignEnum {
	if m != nil {
		return m.MapStringForeignEnum
	}
	return nil
}

func (m *TestAllTypes) GetOneofUint32() uint32 {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofUint32); ok {
		return x.OneofUint32
	}
	return 0
}

func (m *TestAllTypes) GetOneofNestedMessage() *TestAllTypes_NestedMessage {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofNestedMessage); ok {
		return x.OneofNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetOneofString() string {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (m *TestAllTypes) GetOneofBytes() []byte {
	if x, ok := m.GetOneofField().(*TestAllTypes_OneofBytes); ok {
		return x.OneofBytes
	}
	return nil
}

func (m *TestAllTypes) GetOptionalBoolWrapper() *types.BoolValue {
	if m != nil {
		return m.OptionalBoolWrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalInt32Wrapper() *types.Int32Value {
	if m != nil {
		return m.OptionalInt32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalInt64Wrapper() *types.Int64Value {
	if m != nil {
		return m.OptionalInt64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalUint32Wrapper() *types.UInt32Value {
	if m != nil {
		return m.OptionalUint32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalUint64Wrapper() *types.UInt64Value {
	if m != nil {
		return m.OptionalUint64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalFloatWrapper() *types.FloatValue {
	if m != nil {
		return m.OptionalFloatWrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalDoubleWrapper() *types.DoubleValue {
	if m != nil {
		return m.OptionalDoubleWrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalStringWrapper() *types.StringValue {
	if m != nil {
		return m.OptionalStringWrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalBytesWrapper() *types.BytesValue {
	if m != nil {
		return m.OptionalBytesWrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBoolWrapper() []*types.BoolValue {
	if m != nil {
		return m.RepeatedBoolWrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt32Wrapper() []*types.Int32Value {
	if m != nil {
		return m.RepeatedInt32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64Wrapper() []*types.Int64Value {
	if m != nil {
		return m.RepeatedInt64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32Wrapper() []*types.UInt32Value {
	if m != nil {
		return m.RepeatedUint32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64Wrapper() []*types.UInt64Value {
	if m != nil {
		return m.RepeatedUint64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloatWrapper() []*types.FloatValue {
	if m != nil {
		return m.RepeatedFloatWrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDoubleWrapper() []*types.DoubleValue {
	if m != nil {
		return m.RepeatedDoubleWrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedStringWrapper() []*types.StringValue {
	if m != nil {
		return m.RepeatedStringWrapper
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytesWrapper() []*types.BytesValue {
	if m != nil {
		return m.RepeatedBytesWrapper
	}
	return nil
}

func (m *TestAllTypes) GetOptionalDuration() *types.Duration {
	if m != nil {
		return m.OptionalDuration
	}
	return nil
}

func (m *TestAllTypes) GetOptionalTimestamp() *types.Timestamp {
	if m != nil {
		return m.OptionalTimestamp
	}
	return nil
}

func (m *TestAllTypes) GetOptionalFieldMask() *types.FieldMask {
	if m != nil {
		return m.OptionalFieldMask
	}
	return nil
}

func (m *TestAllTypes) GetOptionalStruct() *types.Struct {
	if m != nil {
		return m.OptionalStruct
	}
	return nil
}

func (m *TestAllTypes) GetOptionalAny() *types.Any {
	if m != nil {
		return m.OptionalAny
	}
	return nil
}

func (m *TestAllTypes) GetOptionalValue() *types.Value {
	if m != nil {
		return m.OptionalValue
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDuration() []*types.Duration {
	if m != nil {
		return m.RepeatedDuration
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedTimestamp() []*types.Timestamp {
	if m != nil {
		return m.RepeatedTimestamp
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFieldmask() []*types.FieldMask {
	if m != nil {
		return m.RepeatedFieldmask
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedStruct() []*types.Struct {
	if m != nil {
		return m.RepeatedStruct
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedAny() []*types.Any {
	if m != nil {
		return m.RepeatedAny
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedValue() []*types.Value {
	if m != nil {
		return m.RepeatedValue
	}
	return nil
}

func (m *TestAllTypes) GetFieldname1() int32 {
	if m != nil {
		return m.Fieldname1
	}
	return 0
}

func (m *TestAllTypes) GetFieldName2() int32 {
	if m != nil {
		return m.FieldName2
	}
	return 0
}

func (m *TestAllTypes) GetXFieldName3() int32 {
	if m != nil {
		return m.XFieldName3
	}
	return 0
}

func (m *TestAllTypes) GetField_Name4_() int32 {
	if m != nil {
		return m.Field_Name4_
	}
	return 0
}

func (m *TestAllTypes) GetField0Name5() int32 {
	if m != nil {
		return m.Field0Name5
	}
	return 0
}

func (m *TestAllTypes) GetField_0Name6() int32 {
	if m != nil {
		return m.Field_0Name6
	}
	return 0
}

func (m *TestAllTypes) GetFieldName7() int32 {
	if m != nil {
		return m.FieldName7
	}
	return 0
}

func (m *TestAllTypes) GetFieldName8() int32 {
	if m != nil {
		return m.FieldName8
	}
	return 0
}

func (m *TestAllTypes) GetField_Name9() int32 {
	if m != nil {
		return m.Field_Name9
	}
	return 0
}

func (m *TestAllTypes) GetField_Name10() int32 {
	if m != nil {
		return m.Field_Name10
	}
	return 0
}

func (m *TestAllTypes) GetFIELD_NAME11() int32 {
	if m != nil {
		return m.FIELD_NAME11
	}
	return 0
}

func (m *TestAllTypes) GetFIELDName12() int32 {
	if m != nil {
		return m.FIELDName12
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestAllTypes) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestAllTypes_OneofUint32)(nil),
		(*TestAllTypes_OneofNestedMessage)(nil),
		(*TestAllTypes_OneofString)(nil),
		(*TestAllTypes_OneofBytes)(nil),
	}
}

type TestAllTypes_NestedMessage struct {
	A                    int32         `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	Corecursive          *TestAllTypes `protobuf:"bytes,2,opt,name=corecursive,proto3" json:"corecursive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TestAllTypes_NestedMessage) Reset()         { *m = TestAllTypes_NestedMessage{} }
func (m *TestAllTypes_NestedMessage) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_NestedMessage) ProtoMessage()    {}
func (*TestAllTypes_NestedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{2, 0}
}
func (m *TestAllTypes_NestedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Unmarshal(m, b)
}
func (m *TestAllTypes_NestedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Marshal(b, m, deterministic)
}
func (m *TestAllTypes_NestedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes_NestedMessage.Merge(m, src)
}
func (m *TestAllTypes_NestedMessage) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Size(m)
}
func (m *TestAllTypes_NestedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes_NestedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes_NestedMessage proto.InternalMessageInfo

func (m *TestAllTypes_NestedMessage) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *TestAllTypes_NestedMessage) GetCorecursive() *TestAllTypes {
	if m != nil {
		return m.Corecursive
	}
	return nil
}

type ForeignMessage struct {
	C                    int32    `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForeignMessage) Reset()         { *m = ForeignMessage{} }
func (m *ForeignMessage) String() string { return proto.CompactTextString(m) }
func (*ForeignMessage) ProtoMessage()    {}
func (*ForeignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_13eb9ce388d56238, []int{3}
}
func (m *ForeignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForeignMessage.Unmarshal(m, b)
}
func (m *ForeignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForeignMessage.Marshal(b, m, deterministic)
}
func (m *ForeignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignMessage.Merge(m, src)
}
func (m *ForeignMessage) XXX_Size() int {
	return xxx_messageInfo_ForeignMessage.Size(m)
}
func (m *ForeignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignMessage proto.InternalMessageInfo

func (m *ForeignMessage) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func init() {
	proto.RegisterEnum("conformance.WireFormat", WireFormat_name, WireFormat_value)
	proto.RegisterEnum("conformance.ForeignEnum", ForeignEnum_name, ForeignEnum_value)
	proto.RegisterEnum("conformance.TestAllTypes_NestedEnum", TestAllTypes_NestedEnum_name, TestAllTypes_NestedEnum_value)
	proto.RegisterType((*ConformanceRequest)(nil), "conformance.ConformanceRequest")
	proto.RegisterType((*ConformanceResponse)(nil), "conformance.ConformanceResponse")
	proto.RegisterType((*TestAllTypes)(nil), "conformance.TestAllTypes")
	proto.RegisterMapType((map[bool]bool)(nil), "conformance.TestAllTypes.MapBoolBoolEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "conformance.TestAllTypes.MapFixed32Fixed32Entry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "conformance.TestAllTypes.MapFixed64Fixed64Entry")
	proto.RegisterMapType((map[int32]float64)(nil), "conformance.TestAllTypes.MapInt32DoubleEntry")
	proto.RegisterMapType((map[int32]float32)(nil), "conformance.TestAllTypes.MapInt32FloatEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "conformance.TestAllTypes.MapInt32Int32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "conformance.TestAllTypes.MapInt64Int64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "conformance.TestAllTypes.MapSfixed32Sfixed32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "conformance.TestAllTypes.MapSfixed64Sfixed64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "conformance.TestAllTypes.MapSint32Sint32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "conformance.TestAllTypes.MapSint64Sint64Entry")
	proto.RegisterMapType((map[string][]byte)(nil), "conformance.TestAllTypes.MapStringBytesEntry")
	proto.RegisterMapType((map[string]ForeignEnum)(nil), "conformance.TestAllTypes.MapStringForeignEnumEntry")
	proto.RegisterMapType((map[string]*ForeignMessage)(nil), "conformance.TestAllTypes.MapStringForeignMessageEntry")
	proto.RegisterMapType((map[string]TestAllTypes_NestedEnum)(nil), "conformance.TestAllTypes.MapStringNestedEnumEntry")
	proto.RegisterMapType((map[string]*TestAllTypes_NestedMessage)(nil), "conformance.TestAllTypes.MapStringNestedMessageEntry")
	proto.RegisterMapType((map[string]string)(nil), "conformance.TestAllTypes.MapStringStringEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "conformance.TestAllTypes.MapUint32Uint32Entry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "conformance.TestAllTypes.MapUint64Uint64Entry")
	proto.RegisterType((*TestAllTypes_NestedMessage)(nil), "conformance.TestAllTypes.NestedMessage")
	proto.RegisterType((*ForeignMessage)(nil), "conformance.ForeignMessage")
}

func init() {
	proto.RegisterFile("internal/conformance_proto/conformance.proto", fileDescriptor_13eb9ce388d56238)
}

var fileDescriptor_13eb9ce388d56238 = []byte{
	// 2611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x5a, 0x59, 0x73, 0xdb, 0xc8,
	0x11, 0x16, 0x08, 0x5b, 0x92, 0x87, 0x94, 0x44, 0x8d, 0xae, 0xb1, 0xec, 0x5a, 0xc3, 0xf2, 0x3a,
	0xa6, 0x8f, 0x95, 0x75, 0xc0, 0xf0, 0xb1, 0x59, 0xc7, 0xa2, 0x4d, 0xda, 0x72, 0xd6, 0xa2, 0x0b,
	0xb2, 0xd6, 0x55, 0xce, 0x03, 0x03, 0x51, 0x90, 0x8a, 0x6b, 0x12, 0xe0, 0x02, 0xe0, 0x26, 0xca,
	0x63, 0xfe, 0x41, 0xee, 0xf3, 0x2f, 0xe4, 0xac, 0x4a, 0x25, 0xa9, 0xe4, 0x29, 0x95, 0x97, 0xdc,
	0x49, 0xe5, 0x4e, 0x7e, 0x4c, 0x52, 0x73, 0x62, 0x66, 0x08, 0x50, 0xf4, 0x56, 0x2d, 0x25, 0xf6,
	0x7c, 0xf3, 0x75, 0x4f, 0x4f, 0xe3, 0x1b, 0x4d, 0xc3, 0xe0, 0x46, 0x3b, 0x48, 0xfc, 0x28, 0xf0,
	0x3a, 0x37, 0x5b, 0x61, 0x70, 0x18, 0x46, 0x5d, 0x2f, 0x68, 0xf9, 0xcd, 0x5e, 0x14, 0x26, 0xa1,
	0x6c, 0x59, 0x25, 0x16, 0x58, 0x94, 0x4c, 0xcb, 0x67, 0x8f, 0xc2, 0xf0, 0xa8, 0xe3, 0xdf, 0x24,
	0x43, 0xfb, 0xfd, 0xc3, 0x9b, 0x5e, 0x70, 0x4c, 0x71, 0xcb, 0x6f, 0xe9, 0x43, 0x07, 0xfd, 0xc8,
	0x4b, 0xda, 0x61, 0xc0, 0xc6, 0x2d, 0x7d, 0xfc, 0xb0, 0xed, 0x77, 0x0e, 0x9a, 0x5d, 0x2f, 0x7e,
	0xcd, 0x10, 0xe7, 0x75, 0x44, 0x9c, 0x44, 0xfd, 0x56, 0xc2, 0x46, 0x2f, 0xe8, 0xa3, 0x49, 0xbb,
	0xeb, 0xc7, 0x89, 0xd7, 0xed, 0xe5, 0x05, 0xf0, 0xb9, 0xc8, 0xeb, 0xf5, 0xfc, 0x28, 0xa6, 0xe3,
	0x2b, 0xbf, 0x32, 0x00, 0x7c, 0x98, 0xae, 0xc5, 0xf5, 0x3f, 0xea, 0xfb, 0x71, 0x02, 0xaf, 0x83,
	0x32, 0x9f, 0xd1, 0xec, 0x79, 0xc7, 0x9d, 0xd0, 0x3b, 0x40, 0x86, 0x65, 0x54, 0x4a, 0x4f, 0xc6,
	0xdc, 0x19, 0x3e, 0xf2, 0x9c, 0x0e, 0xc0, 0x4b, 0xa0, 0xf4, 0x61, 0x1c, 0x06, 0x02, 0x58, 0xb0,
	0x8c, 0xca, 0x99, 0x27, 0x63, 0x6e, 0x11, 0x5b, 0x39, 0xa8, 0x01, 0x96, 0x22, 0x4a, 0xee, 0x1f,
	0x34, 0xc3, 0x7e, 0xd2, 0xeb, 0x27, 0x4d, 0xe2, 0x35, 0x41, 0xa6, 0x65, 0x54, 0xa6, 0x37, 0x96,
	0x56, 0xe5, 0x34, 0xbf, 0x6c, 0x47, 0x7e, 0x9d, 0x0c, 0xbb, 0x0b, 0x62, 0x5e, 0x83, 0x4c, 0xa3,
	0xe6, 0xea, 0x19, 0x30, 0xc1, 0x1c, 0xae, 0x7c, 0xb1, 0x00, 0xe6, 0x94, 0x45, 0xc4, 0xbd, 0x30,
	0x88, 0x7d, 0x78, 0x11, 0x14, 0x7b, 0x5e, 0x14, 0xfb, 0x4d, 0x3f, 0x8a, 0xc2, 0x88, 0x2c, 0x00,
	0xc7, 0x05, 0x88, 0xb1, 0x86, 0x6d, 0xf0, 0x2a, 0x98, 0x89, 0xfd, 0xa8, 0xed, 0x75, 0xda, 0x5f,
	0xe0, 0xb0, 0x71, 0x06, 0x9b, 0x16, 0x03, 0x14, 0x7a, 0x19, 0x4c, 0x45, 0xfd, 0x00, 0x27, 0x98,
	0x01, 0xf9, 0x3a, 0x4b, 0xcc, 0x4c, 0x61, 0x59, 0xa9, 0x33, 0x47, 0x4d, 0xdd, 0xa9, 0xac, 0xd4,
	0x2d, 0x83, 0x89, 0xf8, 0x75, 0xbb, 0xd7, 0xf3, 0x0f, 0xd0, 0x69, 0x36, 0xce, 0x0d, 0xd5, 0x49,
	0x30, 0x1e, 0xf9, 0x71, 0xbf, 0x93, 0xac, 0xfc, 0xe4, 0x21, 0x28, 0xbd, 0xf0, 0xe3, 0x64, 0xab,
	0xd3, 0x79, 0x71, 0xdc, 0xf3, 0x63, 0x78, 0x19, 0x4c, 0x87, 0x3d, 0x5c, 0x6b, 0x5e, 0xa7, 0xd9,
	0x0e, 0x92, 0xcd, 0x0d, 0x92, 0x80, 0xd3, 0xee, 0x14, 0xb7, 0x6e, 0x63, 0xa3, 0x0e, 0x73, 0x6c,
	0xb2, 0x2e, 0x53, 0x81, 0x39, 0x36, 0xbc, 0x02, 0x66, 0x04, 0xac, 0x4f, 0xe9, 0xf0, 0xaa, 0xa6,
	0x5c, 0x31, 0x7b, 0x8f, 0x58, 0x07, 0x80, 0x8e, 0x4d, 0x56, 0x75, 0x4a, 0x05, 0x6a, 0x8c, 0x31,
	0x65, 0xc4, 0xcb, 0x9b, 0x4d, 0x81, 0xbb, 0x83, 0x8c, 0x31, 0x65, 0xc4, 0x7b, 0x04, 0x55, 0xa0,
	0x63, 0xc3, 0xab, 0xa0, 0x2c, 0x80, 0x87, 0xed, 0xcf, 0xfb, 0x07, 0x9b, 0x1b, 0x68, 0xc2, 0x32,
	0x2a, 0x13, 0xae, 0x20, 0xa8, 0x53, 0xf3, 0x20, 0xd4, 0xb1, 0xd1, 0xa4, 0x65, 0x54, 0xc6, 0x35,
	0xa8, 0x63, 0xc3, 0xeb, 0x60, 0x36, 0x75, 0xcf, 0x69, 0xcf, 0x58, 0x46, 0x65, 0xc6, 0x15, 0x1c,
	0xbb, 0xcc, 0x9e, 0x01, 0x76, 0x6c, 0x04, 0x2c, 0xa3, 0x52, 0xd6, 0xc1, 0x8e, 0xad, 0xa4, 0xfe,
	0xb0, 0x13, 0x7a, 0x09, 0x2a, 0x5a, 0x46, 0xa5, 0x90, 0xa6, 0xbe, 0x8e, 0x8d, 0xca, 0xfa, 0x0f,
	0xc2, 0xfe, 0x7e, 0xc7, 0x47, 0x25, 0xcb, 0xa8, 0x18, 0xe9, 0xfa, 0x1f, 0x11, 0x2b, 0xbc, 0x04,
	0xc4, 0xcc, 0xe6, 0x7e, 0x18, 0x76, 0xd0, 0x94, 0x65, 0x54, 0x26, 0xdd, 0x12, 0x37, 0x56, 0xc3,
	0xb0, 0xa3, 0x66, 0x33, 0x89, 0xda, 0xc1, 0x11, 0x9a, 0xc6, 0x55, 0x25, 0x65, 0x93, 0x58, 0x95,
	0xe8, 0xf6, 0x8f, 0x13, 0x3f, 0x46, 0x33, 0xb8, 0x8c, 0xd3, 0xe8, 0xaa, 0xd8, 0x08, 0x9b, 0x60,
	0x49, 0xc0, 0x02, 0xfa, 0x78, 0x77, 0xfd, 0x38, 0xf6, 0x8e, 0x7c, 0x04, 0x2d, 0xa3, 0x52, 0xdc,
	0xb8, 0xa2, 0x3c, 0xd8, 0x72, 0x89, 0xae, 0xee, 0x10, 0xfc, 0x33, 0x0a, 0x77, 0x17, 0x38, 0x8f,
	0x62, 0x86, 0x7b, 0x00, 0xa5, 0x59, 0x0a, 0x23, 0xbf, 0x7d, 0x14, 0x08, 0x0f, 0x73, 0xc4, 0xc3,
	0x39, 0xc5, 0x43, 0x9d, 0x62, 0x38, 0xeb, 0xa2, 0x48, 0xa6, 0x62, 0x87, 0x1f, 0x80, 0x79, 0x3d,
	0x6e, 0x3f, 0xe8, 0x77, 0xd1, 0x02, 0x51, 0xa3, 0xb7, 0x4f, 0x0a, 0xba, 0x16, 0xf4, 0xbb, 0x2e,
	0x54, 0x23, 0xc6, 0x36, 0xf8, 0x3e, 0x58, 0x18, 0x08, 0x97, 0x10, 0x2f, 0x12, 0x62, 0x94, 0x15,
	0x2b, 0x21, 0x9b, 0xd3, 0x02, 0x25, 0x6c, 0x8e, 0xc4, 0x46, 0x77, 0xab, 0xd9, 0x6b, 0xfb, 0x2d,
	0x1f, 0x21, 0xbc, 0x67, 0xd5, 0xc2, 0x64, 0x21, 0x9d, 0x47, 0xf7, 0xed, 0x39, 0x1e, 0x86, 0x57,
	0xa4, 0x52, 0x68, 0x85, 0xd1, 0x01, 0x3a, 0xcb, 0xf0, 0x46, 0x5a, 0x0e, 0x0f, 0xc3, 0xe8, 0x00,
	0xd6, 0xc1, 0x6c, 0xe4, 0xb7, 0xfa, 0x51, 0xdc, 0xfe, 0xd8, 0x17, 0x69, 0x3d, 0x47, 0xd2, 0x7a,
	0x36, 0x37, 0x07, 0x6e, 0x59, 0xcc, 0xe1, 0xe9, 0xbc, 0x0c, 0xa6, 0x23, 0xbf, 0xe7, 0x7b, 0x38,
	0x8f, 0xf4, 0x61, 0xbe, 0x60, 0x99, 0x58, 0x6d, 0xb8, 0x55, 0xa8, 0x8d, 0x0c, 0x73, 0x6c, 0x64,
	0x59, 0x26, 0x56, 0x1b, 0x09, 0x46, 0xb5, 0x41, 0xc0, 0x98, 0xda, 0x5c, 0xb4, 0x4c, 0xac, 0x36,
	0xdc, 0x9c, 0xaa, 0x8d, 0x02, 0x74, 0x6c, 0xb4, 0x62, 0x99, 0x58, 0x6d, 0x64, 0xa0, 0xc6, 0xc8,
	0xd4, 0xe6, 0x92, 0x65, 0x62, 0xb5, 0xe1, 0xe6, 0xdd, 0x41, 0x46, 0xa6, 0x36, 0x6f, 0x5b, 0x26,
	0x56, 0x1b, 0x19, 0x48, 0xd5, 0x46, 0x00, 0xb9, 0x2c, 0x5c, 0xb6, 0x4c, 0xac, 0x36, 0xdc, 0x2e,
	0xa9, 0x8d, 0x0a, 0x75, 0x6c, 0xf4, 0x09, 0xcb, 0xc4, 0x6a, 0xa3, 0x40, 0xa9, 0xda, 0xa4, 0xee,
	0x39, 0xed, 0x15, 0xcb, 0xc4, 0x6a, 0x23, 0x02, 0x90, 0xd4, 0x46, 0x03, 0x3b, 0x36, 0xaa, 0x58,
	0x26, 0x56, 0x1b, 0x15, 0x4c, 0xd5, 0x26, 0x0d, 0x82, 0xa8, 0xcd, 0x55, 0xcb, 0xc4, 0x6a, 0x23,
	0x42, 0xe0, 0x6a, 0x23, 0x60, 0x4c, 0x6d, 0xae, 0x59, 0x26, 0x56, 0x1b, 0x6e, 0x4e, 0xd5, 0x46,
	0x00, 0x89, 0xda, 0x5c, 0xb7, 0x4c, 0xac, 0x36, 0xdc, 0xc8, 0xd5, 0x26, 0x8d, 0x90, 0xaa, 0xcd,
	0x0d, 0xcb, 0xc4, 0x6a, 0x23, 0xe2, 0x13, 0x6a, 0x93, 0xb2, 0x11, 0xb5, 0x79, 0xc7, 0x32, 0xb1,
	0xda, 0x08, 0x3a, 0xae, 0x36, 0x02, 0xa6, 0xa9, 0xcd, 0x9a, 0x65, 0xbe, 0x91, 0xda, 0x70, 0x9e,
	0x01, 0xb5, 0x49, 0xb3, 0xa4, 0xa9, 0xcd, 0x3a, 0xf1, 0x30, 0x5c, 0x6d, 0x44, 0x32, 0x07, 0xd4,
	0x46, 0x8f, 0x9b, 0x88, 0xc2, 0xa6, 0x65, 0x8e, 0xae, 0x36, 0x6a, 0xc4, 0x5c, 0x6d, 0x06, 0xc2,
	0x25, 0xc4, 0x36, 0x21, 0x1e, 0xa2, 0x36, 0x5a, 0xa0, 0x5c, 0x6d, 0xb4, 0xdd, 0x62, 0x6a, 0xe3,
	0xe0, 0x3d, 0xa3, 0x6a, 0xa3, 0xee, 0x9b, 0x50, 0x1b, 0x31, 0x8f, 0xa8, 0xcd, 0x6d, 0x86, 0x37,
	0xd2, 0x72, 0x20, 0x6a, 0xf3, 0x02, 0xcc, 0x74, 0xbd, 0x1e, 0x15, 0x08, 0x26, 0x13, 0x77, 0x48,
	0x52, 0x6f, 0xe4, 0x67, 0xe0, 0x99, 0xd7, 0x23, 0xda, 0x41, 0x3e, 0x6a, 0x41, 0x12, 0x1d, 0xbb,
	0x53, 0x5d, 0xd9, 0x26, 0xb1, 0x3a, 0x36, 0x53, 0x95, 0xbb, 0xa3, 0xb1, 0x3a, 0x36, 0xf9, 0x50,
	0x58, 0x99, 0x0d, 0xbe, 0x02, 0xb3, 0x98, 0x95, 0xca, 0x0f, 0x57, 0xa1, 0x7b, 0x84, 0x77, 0x75,
	0x28, 0x2f, 0x95, 0x26, 0xfa, 0x49, 0x99, 0x71, 0x78, 0xb2, 0x55, 0xe6, 0x76, 0x6c, 0x2e, 0x5c,
	0xef, 0x8e, 0xc8, 0xed, 0xd8, 0xf4, 0x53, 0xe5, 0xe6, 0x56, 0xce, 0x4d, 0x45, 0x8e, 0x6b, 0xdd,
	0x27, 0x47, 0xe0, 0xa6, 0x02, 0xb8, 0xab, 0xc5, 0x2d, 0x5b, 0x65, 0x6e, 0xc7, 0xe6, 0xf2, 0xf8,
	0xde, 0x88, 0xdc, 0x8e, 0xbd, 0xab, 0xc5, 0x2d, 0x5b, 0xe1, 0x67, 0xc1, 0x1c, 0xe6, 0x66, 0xda,
	0x26, 0x24, 0xf5, 0x3e, 0x61, 0x5f, 0x1b, 0xca, 0xce, 0x74, 0x96, 0xfd, 0xa0, 0xfc, 0x38, 0x50,
	0xd5, 0xae, 0x78, 0x70, 0x6c, 0xa1, 0xc4, 0x9f, 0x1a, 0xd5, 0x83, 0x63, 0xb3, 0x1f, 0x9a, 0x07,
	0x61, 0x87, 0x87, 0x60, 0x81, 0xe4, 0x87, 0x2f, 0x42, 0x28, 0xf8, 0x03, 0xe2, 0x63, 0x63, 0x78,
	0x8e, 0x18, 0x98, 0xff, 0xa4, 0x5e, 0x70, 0xc8, 0xfa, 0x88, 0xea, 0x07, 0xef, 0x04, 0x5f, 0xcb,
	0xd6, 0xc8, 0x7e, 0x1c, 0x9b, 0xff, 0xd4, 0xfd, 0xa4, 0x23, 0xea, 0xf3, 0x4a, 0x0f, 0x8d, 0xea,
	0xa8, 0xcf, 0x2b, 0x39, 0x4e, 0xb4, 0xe7, 0x95, 0x1e, 0x31, 0x2f, 0x41, 0x39, 0x65, 0x65, 0x67,
	0xcc, 0x43, 0x42, 0xfb, 0xce, 0xc9, 0xb4, 0xf4, 0xf4, 0xa1, 0xbc, 0xd3, 0x5d, 0xc5, 0x08, 0x77,
	0x00, 0xf6, 0x44, 0x4e, 0x23, 0x7a, 0x24, 0x3d, 0x22, 0xac, 0xd7, 0x86, 0xb2, 0xe2, 0x73, 0x0a,
	0xff, 0x4f, 0x29, 0x8b, 0xdd, 0xd4, 0x22, 0xca, 0x9d, 0x4a, 0x21, 0x3b, 0xbf, 0x6a, 0xa3, 0x94,
	0x3b, 0x81, 0xd2, 0x4f, 0xa9, 0xdc, 0x25, 0x2b, 0x4f, 0x02, 0xe3, 0xa6, 0x47, 0x5e, 0x7d, 0x84,
	0x24, 0xd0, 0xe9, 0xe4, 0x34, 0x4c, 0x93, 0x20, 0x19, 0x61, 0x0f, 0x9c, 0x95, 0x88, 0xb5, 0x43,
	0xf2, 0x31, 0xf1, 0x70, 0x6b, 0x04, 0x0f, 0xca, 0xb1, 0x48, 0x3d, 0x2d, 0x76, 0x33, 0x07, 0x61,
	0x0c, 0x96, 0x25, 0x8f, 0xfa, 0xa9, 0xf9, 0x84, 0xb8, 0x74, 0x46, 0x70, 0xa9, 0x9e, 0x99, 0xd4,
	0xe7, 0x52, 0x37, 0x7b, 0x14, 0x1e, 0x81, 0xc5, 0xc1, 0x65, 0x92, 0xa3, 0x6f, 0x7b, 0x94, 0x67,
	0x40, 0x5a, 0x06, 0x3e, 0xfa, 0xa4, 0x67, 0x40, 0x1b, 0x81, 0x1f, 0x82, 0xa5, 0x8c, 0xd5, 0x11,
	0x4f, 0x4f, 0x89, 0xa7, 0xcd, 0xd1, 0x97, 0x96, 0xba, 0x9a, 0xef, 0x66, 0x0c, 0xc1, 0x4b, 0xa0,
	0x14, 0x06, 0x7e, 0x78, 0xc8, 0x8f, 0x9b, 0x10, 0x5f, 0xb1, 0x9f, 0x8c, 0xb9, 0x45, 0x62, 0x65,
	0x87, 0xc7, 0x67, 0xc0, 0x3c, 0x05, 0x69, 0x7b, 0xdb, 0x7b, 0xa3, 0xeb, 0xd6, 0x93, 0x31, 0x17,
	0x12, 0x1a, 0x75, 0x2f, 0x45, 0x04, 0xac, 0xda, 0x3f, 0xe2, 0x1d, 0x09, 0x62, 0x65, 0xb5, 0x7b,
	0x11, 0xd0, 0xaf, 0xac, 0x6c, 0x23, 0xd6, 0xde, 0x00, 0xc4, 0x48, 0xab, 0xb0, 0x21, 0x5d, 0x5c,
	0xc8, 0xf3, 0xc8, 0x1a, 0x4f, 0xe8, 0x37, 0x06, 0x09, 0x73, 0x79, 0x95, 0x76, 0xa6, 0x56, 0x79,
	0x4b, 0x64, 0x15, 0x3f, 0x71, 0x1f, 0x78, 0x9d, 0xbe, 0x9f, 0xde, 0x68, 0xb0, 0xe9, 0x25, 0x9d,
	0x07, 0x5d, 0xb0, 0xa8, 0xb6, 0x33, 0x04, 0xe3, 0x6f, 0x0d, 0x76, 0x0b, 0xd4, 0x19, 0x89, 0x34,
	0x50, 0xca, 0x79, 0xa5, 0xe9, 0x91, 0xc3, 0xe9, 0xd8, 0x82, 0xf3, 0x77, 0x43, 0x38, 0x1d, 0x7b,
	0x90, 0xd3, 0xb1, 0x39, 0xe7, 0x9e, 0x74, 0x1f, 0xee, 0xab, 0x81, 0xfe, 0x9e, 0x92, 0x9e, 0x1f,
	0x20, 0xdd, 0x93, 0x22, 0x5d, 0x50, 0xfb, 0x29, 0x79, 0xb4, 0x52, 0xac, 0x7f, 0x18, 0x46, 0xcb,
	0x83, 0x5d, 0x50, 0xbb, 0x2f, 0x59, 0x19, 0x20, 0xfa, 0x2e, 0x58, 0xff, 0x98, 0x97, 0x01, 0xa2,
	0xe1, 0x5a, 0x06, 0x88, 0x2d, 0x2b, 0x54, 0xaa, 0xee, 0x82, 0xf4, 0x4f, 0x79, 0xa1, 0x52, 0x01,
	0xd7, 0x42, 0xa5, 0xc6, 0x2c, 0x5a, 0xf6, 0x30, 0x72, 0xda, 0x3f, 0xe7, 0xd1, 0xd2, 0x7a, 0xd5,
	0x68, 0xa9, 0x31, 0x2b, 0x03, 0xa4, 0x9c, 0x05, 0xeb, 0x5f, 0xf2, 0x32, 0x40, 0x2a, 0x5c, 0xcb,
	0x00, 0xb1, 0x71, 0xce, 0x86, 0xf4, 0x77, 0xb4, 0x52, 0xfc, 0x7f, 0x35, 0x88, 0x62, 0x0c, 0x2d,
	0x7e, 0xf9, 0xfe, 0x24, 0x05, 0xa9, 0xde, 0xae, 0x05, 0xe3, 0xdf, 0x0c, 0x76, 0x29, 0x19, 0x56,
	0xfc, 0xca, 0x1d, 0x3c, 0x87, 0x53, 0x2a, 0xa8, 0xbf, 0x0f, 0xe1, 0x14, 0xc5, 0xaf, 0x5c, 0xd8,
	0xa5, 0x3d, 0xd2, 0xee, 0xed, 0x82, 0xf4, 0x1f, 0x94, 0xf4, 0x84, 0xe2, 0x57, 0xaf, 0xf7, 0x79,
	0xb4, 0x52, 0xac, 0xff, 0x1c, 0x46, 0x2b, 0x8a, 0x5f, 0x6d, 0x06, 0x64, 0x65, 0x40, 0x2d, 0xfe,
	0x7f, 0xe5, 0x65, 0x40, 0x2e, 0x7e, 0xe5, 0xde, 0x9c, 0x15, 0xaa, 0x56, 0xfc, 0xff, 0xce, 0x0b,
	0x55, 0x29, 0x7e, 0xf5, 0x96, 0x9d, 0x45, 0xab, 0x15, 0xff, 0x7f, 0xf2, 0x68, 0x95, 0xe2, 0x57,
	0xaf, 0x6d, 0x59, 0x19, 0x50, 0x8b, 0xff, 0xbf, 0x79, 0x19, 0x90, 0x8b, 0x5f, 0xb9, 0x9b, 0x73,
	0xce, 0xc7, 0x52, 0x0b, 0x94, 0xbf, 0xee, 0x40, 0xdf, 0x2b, 0xb0, 0x96, 0xd2, 0xc0, 0xda, 0x19,
	0x22, 0x6d, 0x8f, 0x72, 0x0b, 0x7c, 0x0a, 0x44, 0x7f, 0xad, 0x29, 0xde, 0x6b, 0xa0, 0xef, 0x17,
	0x72, 0xce, 0x8f, 0x17, 0x1c, 0xe2, 0x0a, 0xff, 0xc2, 0x04, 0x3f, 0x0d, 0xe6, 0xa4, 0x7e, 0x2f,
	0x7f, 0xc7, 0x82, 0x7e, 0x90, 0x47, 0x56, 0xc7, 0x98, 0x67, 0x5e, 0xfc, 0x3a, 0x25, 0x13, 0x26,
	0xb8, 0xa5, 0xb6, 0x50, 0xfb, 0xad, 0x04, 0xfd, 0x90, 0x12, 0x2d, 0x65, 0x6d, 0x42, 0xbf, 0x95,
	0x28, 0xcd, 0xd5, 0x7e, 0x2b, 0x81, 0x77, 0x80, 0x68, 0xc3, 0x35, 0xbd, 0xe0, 0x18, 0xfd, 0x88,
	0xce, 0x9f, 0x1f, 0x98, 0xbf, 0x15, 0x1c, 0xbb, 0x45, 0x0e, 0xdd, 0x0a, 0x8e, 0xe1, 0x7d, 0xa9,
	0x2d, 0xfb, 0x31, 0xde, 0x06, 0xf4, 0x63, 0x3a, 0x77, 0x71, 0x60, 0x2e, 0xdd, 0x25, 0xd1, 0x08,
	0x24, 0x5f, 0xf1, 0xf6, 0xa4, 0x05, 0xca, 0xb7, 0xe7, 0xa7, 0x05, 0xb2, 0xdb, 0xc3, 0xb6, 0x47,
	0xd4, 0xa5, 0xb4, 0x3d, 0x82, 0x28, 0xdd, 0x9e, 0x9f, 0x15, 0x72, 0x14, 0x4e, 0xda, 0x1e, 0x3e,
	0x2d, 0xdd, 0x1e, 0x99, 0x8b, 0x6c, 0x0f, 0xd9, 0x9d, 0x9f, 0xe7, 0x71, 0x49, 0xbb, 0x93, 0xf6,
	0xcf, 0xd8, 0x2c, 0xbc, 0x3b, 0xf2, 0xa3, 0x82, 0x77, 0xe7, 0xd7, 0x94, 0x28, 0x7f, 0x77, 0xa4,
	0xa7, 0x83, 0xed, 0x8e, 0xa0, 0xc0, 0xbb, 0xf3, 0x0b, 0x3a, 0x3f, 0x67, 0x77, 0x38, 0x94, 0xed,
	0x8e, 0x98, 0x49, 0x77, 0xe7, 0x97, 0x74, 0x6e, 0xee, 0xee, 0x70, 0x38, 0xdd, 0x9d, 0x0b, 0x00,
	0x90, 0xf5, 0x07, 0x5e, 0xd7, 0x5f, 0x47, 0x5f, 0x32, 0xc9, 0x1b, 0x1b, 0xc9, 0x04, 0x2d, 0x50,
	0xa4, 0xf5, 0x8b, 0xbf, 0x6e, 0xa0, 0x2f, 0xcb, 0x88, 0x1d, 0x6c, 0x82, 0x17, 0x41, 0xa9, 0x99,
	0x42, 0x36, 0xd1, 0x57, 0x18, 0xa4, 0xce, 0x21, 0x9b, 0x70, 0x05, 0x4c, 0x51, 0x04, 0x81, 0xd8,
	0x4d, 0xf4, 0x55, 0x9d, 0xc6, 0xc6, 0x7f, 0xe3, 0x91, 0x6f, 0x6b, 0x18, 0x72, 0x0b, 0x7d, 0x8d,
	0x22, 0x64, 0x1b, 0xbc, 0xc4, 0x69, 0xd6, 0x08, 0x8f, 0x83, 0xbe, 0xae, 0x80, 0x30, 0x8f, 0x23,
	0x56, 0x84, 0xbf, 0xdd, 0x46, 0xdf, 0xd0, 0x1d, 0xdd, 0xc6, 0x00, 0x11, 0xda, 0x1d, 0xf4, 0x4d,
	0x3d, 0xda, 0x3b, 0xe9, 0x92, 0xf1, 0xd7, 0xbb, 0xe8, 0x5b, 0x3a, 0xc5, 0x5d, 0xb8, 0x02, 0x4a,
	0x75, 0x81, 0x58, 0x5f, 0x43, 0xdf, 0x66, 0x71, 0x08, 0x92, 0xf5, 0x35, 0x82, 0xd9, 0xae, 0xbd,
	0xff, 0xa8, 0xb9, 0xb3, 0xf5, 0xac, 0xb6, 0xbe, 0x8e, 0xbe, 0xc3, 0x31, 0xd8, 0x48, 0x6d, 0x29,
	0x86, 0xe4, 0x7a, 0x03, 0x7d, 0x57, 0xc1, 0x10, 0xdb, 0xf2, 0x2b, 0x30, 0xa5, 0xfe, 0xc5, 0x5c,
	0x02, 0x86, 0xc7, 0x5e, 0xad, 0x19, 0x1e, 0x7c, 0x17, 0x14, 0x5b, 0xa1, 0xe8, 0x8e, 0xa3, 0xc2,
	0x49, 0x9d, 0x74, 0x19, 0xbd, 0xfc, 0x00, 0xc0, 0xc1, 0x6e, 0x17, 0x2c, 0x03, 0xf3, 0xb5, 0x7f,
	0xcc, 0x5c, 0xe0, 0x5f, 0xe1, 0x3c, 0x38, 0x4d, 0x8b, 0xab, 0x40, 0x6c, 0xf4, 0xcb, 0xbd, 0xc2,
	0x1d, 0x23, 0x65, 0x90, 0x3b, 0x5b, 0x32, 0x83, 0x99, 0xc1, 0x60, 0xca, 0x0c, 0x55, 0x30, 0x9f,
	0xd5, 0xc3, 0x92, 0x39, 0xa6, 0x32, 0x38, 0xa6, 0xb2, 0x39, 0x94, 0x5e, 0x95, 0xcc, 0x71, 0x2a,
	0x83, 0xe3, 0xd4, 0x20, 0xc7, 0x40, 0x4f, 0x4a, 0xe6, 0x98, 0xcd, 0xe0, 0x98, 0xcd, 0xe6, 0x50,
	0x7a, 0x4f, 0x32, 0x07, 0xcc, 0xe0, 0x80, 0x32, 0xc7, 0x23, 0xb0, 0x98, 0xdd, 0x61, 0x92, 0x59,
	0x26, 0x32, 0x58, 0x26, 0x72, 0x58, 0xd4, 0x2e, 0x92, 0xcc, 0x32, 0x9e, 0xc1, 0x32, 0x2e, 0xb3,
	0xd4, 0x01, 0xca, 0xeb, 0x13, 0xc9, 0x3c, 0x33, 0x19, 0x3c, 0x33, 0x79, 0x3c, 0x5a, 0x1f, 0x48,
	0xe6, 0x29, 0x67, 0xf0, 0x94, 0x33, 0xab, 0x4d, 0xee, 0xf6, 0x9c, 0x54, 0xaf, 0x05, 0x99, 0x61,
	0x0b, 0xcc, 0x65, 0x34, 0x76, 0x4e, 0xa2, 0x30, 0x64, 0x8a, 0xfb, 0xa0, 0xac, 0x77, 0x71, 0xe4,
	0xf9, 0x93, 0x19, 0xf3, 0x27, 0x33, 0x8a, 0x44, 0xef, 0xd8, 0xc8, 0x1c, 0x67, 0x32, 0x38, 0xce,
	0x0c, 0x2e, 0x43, 0x6f, 0xcd, 0x9c, 0x44, 0x51, 0x92, 0x29, 0x22, 0x70, 0x6e, 0x48, 0xef, 0x25,
	0x83, 0xea, 0x3d, 0x99, 0xea, 0x0d, 0x5e, 0x7c, 0x48, 0x3e, 0x8f, 0xc0, 0xf9, 0x61, 0xcd, 0x97,
	0x0c, 0xa7, 0xeb, 0xaa, 0xd3, 0xa1, 0xef, 0x42, 0x24, 0x47, 0x1d, 0x5a, 0x70, 0x59, 0x4d, 0x97,
	0x0c, 0x27, 0xf7, 0x64, 0x27, 0xa3, 0xbe, 0x1d, 0x91, 0xbc, 0x79, 0xe0, 0x6c, 0x6e, 0xe3, 0x25,
	0xc3, 0xdd, 0xaa, 0xea, 0x2e, 0xff, 0x9d, 0x49, 0xea, 0x62, 0xe5, 0x2e, 0x00, 0x52, 0x8b, 0x68,
	0x02, 0x98, 0xf5, 0x46, 0xa3, 0x3c, 0x86, 0x7f, 0xa9, 0x6e, 0xb9, 0x65, 0x83, 0xfe, 0xf2, 0xaa,
	0x5c, 0xc0, 0xee, 0x76, 0x6a, 0x8f, 0xcb, 0xff, 0xe3, 0xff, 0x19, 0xd5, 0x29, 0xde, 0x3c, 0x21,
	0x07, 0xd8, 0xca, 0x5b, 0x60, 0x5a, 0xeb, 0x6c, 0x95, 0x80, 0xd1, 0xe2, 0x07, 0x4a, 0xeb, 0xda,
	0x2d, 0x00, 0xd2, 0x7f, 0x0c, 0x03, 0x67, 0x40, 0x71, 0x6f, 0x67, 0xf7, 0x79, 0xed, 0xe1, 0x76,
	0x7d, 0xbb, 0xf6, 0xa8, 0x3c, 0x06, 0x4b, 0x60, 0xf2, 0xb9, 0xdb, 0x78, 0xd1, 0xa8, 0xee, 0xd5,
	0xcb, 0x06, 0x9c, 0x04, 0xa7, 0x9e, 0xee, 0x36, 0x76, 0xca, 0x85, 0x6b, 0x0f, 0x40, 0x51, 0x6e,
	0x2c, 0xcd, 0x80, 0x62, 0xbd, 0xe1, 0xd6, 0xb6, 0x1f, 0xef, 0x34, 0x69, 0xa4, 0x92, 0x81, 0x46,
	0xac, 0x18, 0x5e, 0x95, 0x0b, 0xd5, 0x8b, 0xe0, 0x42, 0x2b, 0xec, 0x0e, 0xfc, 0xd9, 0x22, 0x25,
	0x67, 0x7f, 0x9c, 0x58, 0x37, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xc3, 0x66, 0xe3, 0x3d,
	0x25, 0x00, 0x00,
}
