// Go support for Protocol Buffers - Google's data interchange format
//
// Copyright 2010 The Go Authors.  All rights reserved.
// https://github.com/golang/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

import "extension_base/extension_base.proto";
import "extension_extra/extension_extra.proto";

package extension_user;

option go_package = "github.com/gogo/protobuf/protoc-gen-gogo/testdata/extension_user";

message UserMessage {
  optional string name = 1;
  optional string rank = 2;
}

// Extend with a message
extend extension_base.BaseMessage {
  optional UserMessage user_message = 5;
}

// Extend with a foreign message
extend extension_base.BaseMessage {
  optional extension_extra.ExtraMessage extra_message = 9;
}

// Extend with some primitive types
extend extension_base.BaseMessage {
  optional int32 width = 6;
  optional int64 area = 7;
}

// Extend inside the scope of another type
message LoudMessage {
  extend extension_base.BaseMessage {
    optional uint32 volume = 8;
  }
  extensions 100 to max;
}

// Extend inside the scope of another type, using a message.
message LoginMessage {
  extend extension_base.BaseMessage {
    optional UserMessage user_message = 16;
  }
}

// Extend with a repeated field
extend extension_base.BaseMessage {
  repeated Detail detail = 17;
}

message Detail {
  optional string color = 1;
}

// An extension of an extension
message Announcement {
  optional string words = 1;
  extend LoudMessage {
    optional Announcement loud_ext = 100;
  }
}

// Something that can be put in a message set.
message OldStyleParcel {
  extend extension_base.OldStyleMessage {
    optional OldStyleParcel message_set_extension = 2001;
  }

  required string name = 1;
  optional int32 height = 2;
}
