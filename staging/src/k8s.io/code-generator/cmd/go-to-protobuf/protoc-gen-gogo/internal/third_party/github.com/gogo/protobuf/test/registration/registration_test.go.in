// Protocol Buffers for Go with Gadgets
//
// Copyright (c) 2017, The GoGo Authors. All rights reserved.
// http://github.com/gogo/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package registration

import (
	"testing"

	gogoproto "github.com/gogo/protobuf/proto"
	golangproto "github.com/golang/protobuf/proto"
)

func TestEnumRegistered(t *testing.T) {
	wantMap := map[string]int32{
		"A_VALUE":       0,
		"ANOTHER_VALUE": 1,
	}
	gotMap := golangproto.EnumValueMap("registration.AnEnum")
	for k, want := range wantMap {
		got, ok := gotMap[k]
		if !ok {
			t.Errorf("Enum value %q was not registered with golang/protobuf", k)
		}
		if got != want {
			t.Errorf("Enum value %q was different with golang/protobuf: want %v, got %v", k, want, got)
		}
	}
	gotMap = gogoproto.EnumValueMap("registration.AnEnum")
	for k, want := range wantMap {
		got, ok := gotMap[k]
		if !ok {
			t.Errorf("Enum value %q was not registered with gogo/protobuf", k)
		}
		if got != want {
			t.Errorf("Enum value %q was different with gogo/protobuf: want %v, got %v", k, want, got)
		}
	}
}

func TestMessageRegistered(t *testing.T) {
	got := golangproto.MessageType("registration.AMessage")
	if got == nil {
		t.Error(`Message "AMessage" was not registered with golang/protobuf`)
	}
	got = gogoproto.MessageType("registration.AMessage")
	if got == nil {
		t.Error(`Message "AMessage" was not registered with gogo/protobuf`)
	}
}

func TestFileRegistered(t *testing.T) {
	got := golangproto.FileDescriptor("registration.proto")
	if got == nil {
		t.Error(`File "registration.proto" was not registered with golang/protobuf`)
	}
	got = gogoproto.FileDescriptor("registration.proto")
	if got == nil {
		t.Error(`File "registration.proto" was not registered with gogo/protobuf`)
	}
}
