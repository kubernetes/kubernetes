// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: requiredexample.proto

package required

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequiredExample struct {
	TheRequiredString    *string  `protobuf:"bytes,1,req,name=theRequiredString" json:"theRequiredString,omitempty"`
	TheOptionalString    *string  `protobuf:"bytes,2,opt,name=theOptionalString" json:"theOptionalString,omitempty"`
	TheRepeatedStrings   []string `protobuf:"bytes,3,rep,name=theRepeatedStrings" json:"theRepeatedStrings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequiredExample) Reset()         { *m = RequiredExample{} }
func (m *RequiredExample) String() string { return proto.CompactTextString(m) }
func (*RequiredExample) ProtoMessage()    {}
func (*RequiredExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_96043524afb2ed2f, []int{0}
}
func (m *RequiredExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequiredExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequiredExample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequiredExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiredExample.Merge(m, src)
}
func (m *RequiredExample) XXX_Size() int {
	return m.Size()
}
func (m *RequiredExample) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiredExample.DiscardUnknown(m)
}

var xxx_messageInfo_RequiredExample proto.InternalMessageInfo

func (m *RequiredExample) GetTheRequiredString() string {
	if m != nil && m.TheRequiredString != nil {
		return *m.TheRequiredString
	}
	return ""
}

func (m *RequiredExample) GetTheOptionalString() string {
	if m != nil && m.TheOptionalString != nil {
		return *m.TheOptionalString
	}
	return ""
}

func (m *RequiredExample) GetTheRepeatedStrings() []string {
	if m != nil {
		return m.TheRepeatedStrings
	}
	return nil
}

type NidOptNative struct {
	Field1               float64  `protobuf:"fixed64,1,req,name=Field1" json:"Field1"`
	Field2               float32  `protobuf:"fixed32,2,req,name=Field2" json:"Field2"`
	Field3               int32    `protobuf:"varint,3,req,name=Field3" json:"Field3"`
	Field4               int64    `protobuf:"varint,4,req,name=Field4" json:"Field4"`
	Field5               uint32   `protobuf:"varint,5,req,name=Field5" json:"Field5"`
	Field6               uint64   `protobuf:"varint,6,req,name=Field6" json:"Field6"`
	Field7               int32    `protobuf:"zigzag32,7,req,name=Field7" json:"Field7"`
	Field8               int64    `protobuf:"zigzag64,8,req,name=Field8" json:"Field8"`
	Field9               uint32   `protobuf:"fixed32,9,req,name=Field9" json:"Field9"`
	Field10              int32    `protobuf:"fixed32,10,req,name=Field10" json:"Field10"`
	Field11              uint64   `protobuf:"fixed64,11,req,name=Field11" json:"Field11"`
	Field12              int64    `protobuf:"fixed64,12,req,name=Field12" json:"Field12"`
	Field13              bool     `protobuf:"varint,13,req,name=Field13" json:"Field13"`
	Field14              string   `protobuf:"bytes,14,req,name=Field14" json:"Field14"`
	Field15              []byte   `protobuf:"bytes,15,req,name=Field15" json:"Field15"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NidOptNative) Reset()         { *m = NidOptNative{} }
func (m *NidOptNative) String() string { return proto.CompactTextString(m) }
func (*NidOptNative) ProtoMessage()    {}
func (*NidOptNative) Descriptor() ([]byte, []int) {
	return fileDescriptor_96043524afb2ed2f, []int{1}
}
func (m *NidOptNative) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NidOptNative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NidOptNative.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NidOptNative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NidOptNative.Merge(m, src)
}
func (m *NidOptNative) XXX_Size() int {
	return m.Size()
}
func (m *NidOptNative) XXX_DiscardUnknown() {
	xxx_messageInfo_NidOptNative.DiscardUnknown(m)
}

var xxx_messageInfo_NidOptNative proto.InternalMessageInfo

func (m *NidOptNative) GetField1() float64 {
	if m != nil {
		return m.Field1
	}
	return 0
}

func (m *NidOptNative) GetField2() float32 {
	if m != nil {
		return m.Field2
	}
	return 0
}

func (m *NidOptNative) GetField3() int32 {
	if m != nil {
		return m.Field3
	}
	return 0
}

func (m *NidOptNative) GetField4() int64 {
	if m != nil {
		return m.Field4
	}
	return 0
}

func (m *NidOptNative) GetField5() uint32 {
	if m != nil {
		return m.Field5
	}
	return 0
}

func (m *NidOptNative) GetField6() uint64 {
	if m != nil {
		return m.Field6
	}
	return 0
}

func (m *NidOptNative) GetField7() int32 {
	if m != nil {
		return m.Field7
	}
	return 0
}

func (m *NidOptNative) GetField8() int64 {
	if m != nil {
		return m.Field8
	}
	return 0
}

func (m *NidOptNative) GetField9() uint32 {
	if m != nil {
		return m.Field9
	}
	return 0
}

func (m *NidOptNative) GetField10() int32 {
	if m != nil {
		return m.Field10
	}
	return 0
}

func (m *NidOptNative) GetField11() uint64 {
	if m != nil {
		return m.Field11
	}
	return 0
}

func (m *NidOptNative) GetField12() int64 {
	if m != nil {
		return m.Field12
	}
	return 0
}

func (m *NidOptNative) GetField13() bool {
	if m != nil {
		return m.Field13
	}
	return false
}

func (m *NidOptNative) GetField14() string {
	if m != nil {
		return m.Field14
	}
	return ""
}

func (m *NidOptNative) GetField15() []byte {
	if m != nil {
		return m.Field15
	}
	return nil
}

type NinOptNative struct {
	Field1               *float64 `protobuf:"fixed64,1,req,name=Field1" json:"Field1,omitempty"`
	Field2               *float32 `protobuf:"fixed32,2,req,name=Field2" json:"Field2,omitempty"`
	Field3               *int32   `protobuf:"varint,3,req,name=Field3" json:"Field3,omitempty"`
	Field4               *int64   `protobuf:"varint,4,req,name=Field4" json:"Field4,omitempty"`
	Field5               *uint32  `protobuf:"varint,5,req,name=Field5" json:"Field5,omitempty"`
	Field6               *uint64  `protobuf:"varint,6,req,name=Field6" json:"Field6,omitempty"`
	Field7               *int32   `protobuf:"zigzag32,7,req,name=Field7" json:"Field7,omitempty"`
	Field8               *int64   `protobuf:"zigzag64,8,req,name=Field8" json:"Field8,omitempty"`
	Field9               *uint32  `protobuf:"fixed32,9,req,name=Field9" json:"Field9,omitempty"`
	Field10              *int32   `protobuf:"fixed32,10,req,name=Field10" json:"Field10,omitempty"`
	Field11              *uint64  `protobuf:"fixed64,11,req,name=Field11" json:"Field11,omitempty"`
	Field12              *int64   `protobuf:"fixed64,12,req,name=Field12" json:"Field12,omitempty"`
	Field13              *bool    `protobuf:"varint,13,req,name=Field13" json:"Field13,omitempty"`
	Field14              *string  `protobuf:"bytes,14,req,name=Field14" json:"Field14,omitempty"`
	Field15              []byte   `protobuf:"bytes,15,req,name=Field15" json:"Field15,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NinOptNative) Reset()         { *m = NinOptNative{} }
func (m *NinOptNative) String() string { return proto.CompactTextString(m) }
func (*NinOptNative) ProtoMessage()    {}
func (*NinOptNative) Descriptor() ([]byte, []int) {
	return fileDescriptor_96043524afb2ed2f, []int{2}
}
func (m *NinOptNative) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NinOptNative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NinOptNative.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NinOptNative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NinOptNative.Merge(m, src)
}
func (m *NinOptNative) XXX_Size() int {
	return m.Size()
}
func (m *NinOptNative) XXX_DiscardUnknown() {
	xxx_messageInfo_NinOptNative.DiscardUnknown(m)
}

var xxx_messageInfo_NinOptNative proto.InternalMessageInfo

func (m *NinOptNative) GetField1() float64 {
	if m != nil && m.Field1 != nil {
		return *m.Field1
	}
	return 0
}

func (m *NinOptNative) GetField2() float32 {
	if m != nil && m.Field2 != nil {
		return *m.Field2
	}
	return 0
}

func (m *NinOptNative) GetField3() int32 {
	if m != nil && m.Field3 != nil {
		return *m.Field3
	}
	return 0
}

func (m *NinOptNative) GetField4() int64 {
	if m != nil && m.Field4 != nil {
		return *m.Field4
	}
	return 0
}

func (m *NinOptNative) GetField5() uint32 {
	if m != nil && m.Field5 != nil {
		return *m.Field5
	}
	return 0
}

func (m *NinOptNative) GetField6() uint64 {
	if m != nil && m.Field6 != nil {
		return *m.Field6
	}
	return 0
}

func (m *NinOptNative) GetField7() int32 {
	if m != nil && m.Field7 != nil {
		return *m.Field7
	}
	return 0
}

func (m *NinOptNative) GetField8() int64 {
	if m != nil && m.Field8 != nil {
		return *m.Field8
	}
	return 0
}

func (m *NinOptNative) GetField9() uint32 {
	if m != nil && m.Field9 != nil {
		return *m.Field9
	}
	return 0
}

func (m *NinOptNative) GetField10() int32 {
	if m != nil && m.Field10 != nil {
		return *m.Field10
	}
	return 0
}

func (m *NinOptNative) GetField11() uint64 {
	if m != nil && m.Field11 != nil {
		return *m.Field11
	}
	return 0
}

func (m *NinOptNative) GetField12() int64 {
	if m != nil && m.Field12 != nil {
		return *m.Field12
	}
	return 0
}

func (m *NinOptNative) GetField13() bool {
	if m != nil && m.Field13 != nil {
		return *m.Field13
	}
	return false
}

func (m *NinOptNative) GetField14() string {
	if m != nil && m.Field14 != nil {
		return *m.Field14
	}
	return ""
}

func (m *NinOptNative) GetField15() []byte {
	if m != nil {
		return m.Field15
	}
	return nil
}

type NestedNinOptNative struct {
	NestedNinOpts        []*NinOptNative `protobuf:"bytes,1,rep,name=NestedNinOpts" json:"NestedNinOpts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NestedNinOptNative) Reset()         { *m = NestedNinOptNative{} }
func (m *NestedNinOptNative) String() string { return proto.CompactTextString(m) }
func (*NestedNinOptNative) ProtoMessage()    {}
func (*NestedNinOptNative) Descriptor() ([]byte, []int) {
	return fileDescriptor_96043524afb2ed2f, []int{3}
}
func (m *NestedNinOptNative) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedNinOptNative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedNinOptNative.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedNinOptNative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedNinOptNative.Merge(m, src)
}
func (m *NestedNinOptNative) XXX_Size() int {
	return m.Size()
}
func (m *NestedNinOptNative) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedNinOptNative.DiscardUnknown(m)
}

var xxx_messageInfo_NestedNinOptNative proto.InternalMessageInfo

func (m *NestedNinOptNative) GetNestedNinOpts() []*NinOptNative {
	if m != nil {
		return m.NestedNinOpts
	}
	return nil
}

func init() {
	proto.RegisterType((*RequiredExample)(nil), "required.RequiredExample")
	proto.RegisterType((*NidOptNative)(nil), "required.NidOptNative")
	proto.RegisterType((*NinOptNative)(nil), "required.NinOptNative")
	proto.RegisterType((*NestedNinOptNative)(nil), "required.NestedNinOptNative")
}

func init() { proto.RegisterFile("requiredexample.proto", fileDescriptor_96043524afb2ed2f) }

var fileDescriptor_96043524afb2ed2f = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd4, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xc0, 0x71, 0x3b, 0x65, 0xf9, 0x98, 0x05, 0xd9, 0x6d, 0xe2, 0xe4, 0xc4, 0x98, 0x7a, 0xc2,
	0xd5, 0x5c, 0x68, 0x57, 0x0a, 0xec, 0x47, 0xe2, 0xd5, 0x26, 0x7a, 0xc9, 0x26, 0xf5, 0x09, 0x58,
	0x19, 0xd9, 0x26, 0x2c, 0xad, 0x30, 0x18, 0xaf, 0x7d, 0x0f, 0xdf, 0x67, 0x2f, 0x7d, 0x00, 0x63,
	0x94, 0xa7, 0xf0, 0xd2, 0x58, 0xda, 0x33, 0x9c, 0xea, 0x1d, 0x3d, 0xff, 0x33, 0x13, 0xc8, 0x8f,
	0x54, 0x3e, 0x59, 0x9b, 0x8f, 0xdb, 0x74, 0x6d, 0xe6, 0xe6, 0xf3, 0xec, 0x3e, 0x5f, 0x9a, 0x28,
	0x5f, 0x67, 0x36, 0x0b, 0xda, 0xd5, 0xf8, 0xe9, 0xcb, 0x45, 0x6a, 0xef, 0xb6, 0xb7, 0xd1, 0xfb,
	0xec, 0xfe, 0x6c, 0x91, 0x2d, 0xb2, 0xb3, 0x62, 0xe1, 0x76, 0xfb, 0xa1, 0x78, 0x2a, 0x1e, 0x8a,
	0x4f, 0xfb, 0x83, 0x83, 0xaf, 0x9e, 0xec, 0x27, 0xe5, 0xd9, 0x37, 0xfb, 0x2b, 0x83, 0x17, 0xf2,
	0xd4, 0xde, 0x99, 0x6a, 0xfa, 0xce, 0xae, 0xd3, 0xd5, 0x02, 0x3c, 0x14, 0xba, 0x93, 0xfc, 0x1b,
	0xca, 0xed, 0x9b, 0xdc, 0xa6, 0xd9, 0x6a, 0xb6, 0x2c, 0xb7, 0x05, 0x7a, 0xe5, 0x36, 0x0f, 0x41,
	0x24, 0x83, 0xe2, 0x8a, 0xdc, 0xcc, 0x6c, 0x75, 0xc5, 0x06, 0x7c, 0xf4, 0x75, 0x27, 0xf9, 0x4f,
	0x19, 0x7c, 0xf7, 0x65, 0x77, 0x9a, 0xce, 0x6f, 0x72, 0x3b, 0x9d, 0xd9, 0xf4, 0x93, 0x09, 0x9e,
	0xc9, 0xe6, 0xdb, 0xd4, 0x2c, 0xe7, 0xc3, 0xe2, 0x1b, 0x79, 0xd7, 0x8d, 0x87, 0x1f, 0xcf, 0x1f,
	0x25, 0xe5, 0x8c, 0x6a, 0x0c, 0x02, 0x85, 0x16, 0xac, 0xc6, 0x54, 0x47, 0xe0, 0xa3, 0xd0, 0x47,
	0xac, 0x8e, 0xa8, 0x8e, 0xa1, 0x81, 0x42, 0xfb, 0xac, 0x8e, 0xa9, 0x4e, 0xe0, 0x08, 0x85, 0xee,
	0xb1, 0x3a, 0xa1, 0x7a, 0x0e, 0x4d, 0x14, 0xba, 0xc1, 0xea, 0x39, 0xd5, 0x0b, 0x68, 0xa1, 0xd0,
	0xa7, 0xac, 0x5e, 0x50, 0xbd, 0x84, 0x36, 0x0a, 0x1d, 0xb0, 0x7a, 0x49, 0xf5, 0x0a, 0x3a, 0x28,
	0x74, 0x8b, 0xd5, 0xab, 0x20, 0x94, 0xad, 0xfd, 0x2f, 0x7f, 0x05, 0x12, 0x85, 0xee, 0x97, 0xb9,
	0x1a, 0xba, 0x3e, 0x84, 0x63, 0x14, 0xba, 0xc9, 0xfb, 0xd0, 0xf5, 0x18, 0xba, 0x28, 0xf4, 0x09,
	0xef, 0xb1, 0xeb, 0x23, 0xe8, 0xa1, 0xd0, 0x6d, 0xde, 0x47, 0xae, 0x8f, 0xe1, 0xf1, 0xdf, 0x3f,
	0x08, 0xef, 0x63, 0xd7, 0x27, 0xd0, 0x47, 0xa1, 0xbb, 0xbc, 0x4f, 0x06, 0x5f, 0x0a, 0xde, 0x95,
	0xe3, 0x55, 0x9c, 0x97, 0x60, 0x15, 0x87, 0x25, 0x52, 0xc5, 0x49, 0x09, 0x53, 0x71, 0x4c, 0x62,
	0x54, 0x9c, 0x91, 0x00, 0x15, 0x07, 0x24, 0x3a, 0xc5, 0xe9, 0x08, 0x4d, 0x71, 0x34, 0xe2, 0x52,
	0x9c, 0x8b, 0xa0, 0xa0, 0x06, 0xe5, 0x88, 0xa0, 0x46, 0xe4, 0x70, 0xa0, 0x86, 0xe3, 0x58, 0xa0,
	0xc6, 0xe2, 0x40, 0xa0, 0x06, 0xe2, 0x28, 0xa0, 0x46, 0xe1, 0x10, 0x12, 0x19, 0x4c, 0xcd, 0xc6,
	0x9a, 0x39, 0x93, 0x78, 0x2d, 0x7b, 0x87, 0xd3, 0x0d, 0x78, 0xe8, 0xeb, 0xe3, 0x58, 0x45, 0xd5,
	0xab, 0x26, 0x3a, 0x5c, 0x4f, 0xf8, 0xf2, 0xf5, 0xc9, 0xef, 0x5f, 0xa1, 0xf7, 0xb0, 0x0b, 0xbd,
	0x6f, 0xbb, 0xd0, 0xfb, 0xb9, 0x0b, 0xbd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0x9e, 0xae,
	0x5f, 0xba, 0x04, 0x00, 0x00,
}

func (m *RequiredExample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequiredExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequiredExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TheRepeatedStrings) > 0 {
		for iNdEx := len(m.TheRepeatedStrings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TheRepeatedStrings[iNdEx])
			copy(dAtA[i:], m.TheRepeatedStrings[iNdEx])
			i = encodeVarintRequiredexample(dAtA, i, uint64(len(m.TheRepeatedStrings[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TheOptionalString != nil {
		i -= len(*m.TheOptionalString)
		copy(dAtA[i:], *m.TheOptionalString)
		i = encodeVarintRequiredexample(dAtA, i, uint64(len(*m.TheOptionalString)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheRequiredString == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("theRequiredString")
	} else {
		i -= len(*m.TheRequiredString)
		copy(dAtA[i:], *m.TheRequiredString)
		i = encodeVarintRequiredexample(dAtA, i, uint64(len(*m.TheRequiredString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NidOptNative) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NidOptNative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NidOptNative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Field15 != nil {
		i -= len(m.Field15)
		copy(dAtA[i:], m.Field15)
		i = encodeVarintRequiredexample(dAtA, i, uint64(len(m.Field15)))
		i--
		dAtA[i] = 0x7a
	}
	i -= len(m.Field14)
	copy(dAtA[i:], m.Field14)
	i = encodeVarintRequiredexample(dAtA, i, uint64(len(m.Field14)))
	i--
	dAtA[i] = 0x72
	i--
	if m.Field13 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Field12))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Field11))
	i--
	dAtA[i] = 0x59
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Field10))
	i--
	dAtA[i] = 0x55
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Field9))
	i--
	dAtA[i] = 0x4d
	i = encodeVarintRequiredexample(dAtA, i, uint64((uint64(m.Field8)<<1)^uint64((m.Field8>>63))))
	i--
	dAtA[i] = 0x40
	i = encodeVarintRequiredexample(dAtA, i, uint64((uint32(m.Field7)<<1)^uint32((m.Field7>>31))))
	i--
	dAtA[i] = 0x38
	i = encodeVarintRequiredexample(dAtA, i, uint64(m.Field6))
	i--
	dAtA[i] = 0x30
	i = encodeVarintRequiredexample(dAtA, i, uint64(m.Field5))
	i--
	dAtA[i] = 0x28
	i = encodeVarintRequiredexample(dAtA, i, uint64(m.Field4))
	i--
	dAtA[i] = 0x20
	i = encodeVarintRequiredexample(dAtA, i, uint64(m.Field3))
	i--
	dAtA[i] = 0x18
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Field2))))
	i--
	dAtA[i] = 0x15
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Field1))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *NinOptNative) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NinOptNative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NinOptNative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Field15 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field15")
	} else {
		i -= len(m.Field15)
		copy(dAtA[i:], m.Field15)
		i = encodeVarintRequiredexample(dAtA, i, uint64(len(m.Field15)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Field14 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field14")
	} else {
		i -= len(*m.Field14)
		copy(dAtA[i:], *m.Field14)
		i = encodeVarintRequiredexample(dAtA, i, uint64(len(*m.Field14)))
		i--
		dAtA[i] = 0x72
	}
	if m.Field13 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field13")
	} else {
		i--
		if *m.Field13 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Field12 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field12")
	} else {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Field12))
		i--
		dAtA[i] = 0x61
	}
	if m.Field11 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field11")
	} else {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Field11))
		i--
		dAtA[i] = 0x59
	}
	if m.Field10 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field10")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Field10))
		i--
		dAtA[i] = 0x55
	}
	if m.Field9 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field9")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Field9))
		i--
		dAtA[i] = 0x4d
	}
	if m.Field8 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field8")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64((uint64(*m.Field8)<<1)^uint64((*m.Field8>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.Field7 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field7")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64((uint32(*m.Field7)<<1)^uint32((*m.Field7>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.Field6 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field6")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64(*m.Field6))
		i--
		dAtA[i] = 0x30
	}
	if m.Field5 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field5")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64(*m.Field5))
		i--
		dAtA[i] = 0x28
	}
	if m.Field4 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field4")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64(*m.Field4))
		i--
		dAtA[i] = 0x20
	}
	if m.Field3 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field3")
	} else {
		i = encodeVarintRequiredexample(dAtA, i, uint64(*m.Field3))
		i--
		dAtA[i] = 0x18
	}
	if m.Field2 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field2")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Field2))))
		i--
		dAtA[i] = 0x15
	}
	if m.Field1 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field1")
	} else {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Field1))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *NestedNinOptNative) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedNinOptNative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedNinOptNative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NestedNinOpts) > 0 {
		for iNdEx := len(m.NestedNinOpts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NestedNinOpts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequiredexample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequiredexample(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequiredexample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRequiredExample(r randyRequiredexample, easy bool) *RequiredExample {
	this := &RequiredExample{}
	v1 := string(randStringRequiredexample(r))
	this.TheRequiredString = &v1
	if r.Intn(5) != 0 {
		v2 := string(randStringRequiredexample(r))
		this.TheOptionalString = &v2
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(10)
		this.TheRepeatedStrings = make([]string, v3)
		for i := 0; i < v3; i++ {
			this.TheRepeatedStrings[i] = string(randStringRequiredexample(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRequiredexample(r, 4)
	}
	return this
}

func NewPopulatedNidOptNative(r randyRequiredexample, easy bool) *NidOptNative {
	this := &NidOptNative{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	this.Field4 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field4 *= -1
	}
	this.Field5 = uint32(r.Uint32())
	this.Field6 = uint64(uint64(r.Uint32()))
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	this.Field8 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field8 *= -1
	}
	this.Field9 = uint32(r.Uint32())
	this.Field10 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field10 *= -1
	}
	this.Field11 = uint64(uint64(r.Uint32()))
	this.Field12 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field12 *= -1
	}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	this.Field14 = string(randStringRequiredexample(r))
	v4 := r.Intn(100)
	this.Field15 = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRequiredexample(r, 16)
	}
	return this
}

func NewPopulatedNinOptNative(r randyRequiredexample, easy bool) *NinOptNative {
	this := &NinOptNative{}
	v5 := float64(r.Float64())
	if r.Intn(2) == 0 {
		v5 *= -1
	}
	this.Field1 = &v5
	v6 := float32(r.Float32())
	if r.Intn(2) == 0 {
		v6 *= -1
	}
	this.Field2 = &v6
	v7 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v7 *= -1
	}
	this.Field3 = &v7
	v8 := int64(r.Int63())
	if r.Intn(2) == 0 {
		v8 *= -1
	}
	this.Field4 = &v8
	v9 := uint32(r.Uint32())
	this.Field5 = &v9
	v10 := uint64(uint64(r.Uint32()))
	this.Field6 = &v10
	v11 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v11 *= -1
	}
	this.Field7 = &v11
	v12 := int64(r.Int63())
	if r.Intn(2) == 0 {
		v12 *= -1
	}
	this.Field8 = &v12
	v13 := uint32(r.Uint32())
	this.Field9 = &v13
	v14 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v14 *= -1
	}
	this.Field10 = &v14
	v15 := uint64(uint64(r.Uint32()))
	this.Field11 = &v15
	v16 := int64(r.Int63())
	if r.Intn(2) == 0 {
		v16 *= -1
	}
	this.Field12 = &v16
	v17 := bool(bool(r.Intn(2) == 0))
	this.Field13 = &v17
	v18 := string(randStringRequiredexample(r))
	this.Field14 = &v18
	v19 := r.Intn(100)
	this.Field15 = make([]byte, v19)
	for i := 0; i < v19; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRequiredexample(r, 16)
	}
	return this
}

func NewPopulatedNestedNinOptNative(r randyRequiredexample, easy bool) *NestedNinOptNative {
	this := &NestedNinOptNative{}
	if r.Intn(5) != 0 {
		v20 := r.Intn(5)
		this.NestedNinOpts = make([]*NinOptNative, v20)
		for i := 0; i < v20; i++ {
			this.NestedNinOpts[i] = NewPopulatedNinOptNative(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRequiredexample(r, 2)
	}
	return this
}

type randyRequiredexample interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRequiredexample(r randyRequiredexample) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRequiredexample(r randyRequiredexample) string {
	v21 := r.Intn(100)
	tmps := make([]rune, v21)
	for i := 0; i < v21; i++ {
		tmps[i] = randUTF8RuneRequiredexample(r)
	}
	return string(tmps)
}
func randUnrecognizedRequiredexample(r randyRequiredexample, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRequiredexample(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRequiredexample(dAtA []byte, r randyRequiredexample, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(key))
		v22 := r.Int63()
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(v22))
	case 1:
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRequiredexample(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRequiredexample(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RequiredExample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheRequiredString != nil {
		l = len(*m.TheRequiredString)
		n += 1 + l + sovRequiredexample(uint64(l))
	}
	if m.TheOptionalString != nil {
		l = len(*m.TheOptionalString)
		n += 1 + l + sovRequiredexample(uint64(l))
	}
	if len(m.TheRepeatedStrings) > 0 {
		for _, s := range m.TheRepeatedStrings {
			l = len(s)
			n += 1 + l + sovRequiredexample(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NidOptNative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 5
	n += 1 + sovRequiredexample(uint64(m.Field3))
	n += 1 + sovRequiredexample(uint64(m.Field4))
	n += 1 + sovRequiredexample(uint64(m.Field5))
	n += 1 + sovRequiredexample(uint64(m.Field6))
	n += 1 + sozRequiredexample(uint64(m.Field7))
	n += 1 + sozRequiredexample(uint64(m.Field8))
	n += 5
	n += 5
	n += 9
	n += 9
	n += 2
	l = len(m.Field14)
	n += 1 + l + sovRequiredexample(uint64(l))
	if m.Field15 != nil {
		l = len(m.Field15)
		n += 1 + l + sovRequiredexample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NinOptNative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != nil {
		n += 9
	}
	if m.Field2 != nil {
		n += 5
	}
	if m.Field3 != nil {
		n += 1 + sovRequiredexample(uint64(*m.Field3))
	}
	if m.Field4 != nil {
		n += 1 + sovRequiredexample(uint64(*m.Field4))
	}
	if m.Field5 != nil {
		n += 1 + sovRequiredexample(uint64(*m.Field5))
	}
	if m.Field6 != nil {
		n += 1 + sovRequiredexample(uint64(*m.Field6))
	}
	if m.Field7 != nil {
		n += 1 + sozRequiredexample(uint64(*m.Field7))
	}
	if m.Field8 != nil {
		n += 1 + sozRequiredexample(uint64(*m.Field8))
	}
	if m.Field9 != nil {
		n += 5
	}
	if m.Field10 != nil {
		n += 5
	}
	if m.Field11 != nil {
		n += 9
	}
	if m.Field12 != nil {
		n += 9
	}
	if m.Field13 != nil {
		n += 2
	}
	if m.Field14 != nil {
		l = len(*m.Field14)
		n += 1 + l + sovRequiredexample(uint64(l))
	}
	if m.Field15 != nil {
		l = len(m.Field15)
		n += 1 + l + sovRequiredexample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedNinOptNative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NestedNinOpts) > 0 {
		for _, e := range m.NestedNinOpts {
			l = e.Size()
			n += 1 + l + sovRequiredexample(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequiredexample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequiredexample(x uint64) (n int) {
	return sovRequiredexample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequiredExample) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequiredexample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequiredExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequiredExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheRequiredString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TheRequiredString = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOptionalString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TheOptionalString = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheRepeatedStrings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheRepeatedStrings = append(m.TheRepeatedStrings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequiredexample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("theRequiredString")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NidOptNative) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequiredexample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NidOptNative: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NidOptNative: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Field1 = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Field2 = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			m.Field3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			m.Field4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			m.Field5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field5 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			m.Field6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field6 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Field7 = v
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Field8 = int64(v)
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			m.Field9 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Field9 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			m.Field10 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Field10 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field11", wireType)
			}
			m.Field11 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Field11 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field12", wireType)
			}
			m.Field12 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Field12 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field13", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field13 = bool(v != 0)
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field14 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field15", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field15 = append(m.Field15[:0], dAtA[iNdEx:postIndex]...)
			if m.Field15 == nil {
				m.Field15 = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00004000)
		default:
			iNdEx = preIndex
			skippy, err := skipRequiredexample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field2")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field3")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field4")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field5")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field6")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field7")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field8")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field9")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field10")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field11")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field12")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field13")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field14")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field15")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NinOptNative) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequiredexample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NinOptNative: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NinOptNative: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Field1 = &v2
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Field2 = &v2
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field3 = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field4 = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field5 = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field6 = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Field7 = &v
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Field8 = &v2
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Field9 = &v
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			var v int32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Field10 = &v
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field11", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Field11 = &v
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field12", wireType)
			}
			var v int64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Field12 = &v
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field13", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Field13 = &b
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Field14 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field15", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field15 = append(m.Field15[:0], dAtA[iNdEx:postIndex]...)
			if m.Field15 == nil {
				m.Field15 = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00004000)
		default:
			iNdEx = preIndex
			skippy, err := skipRequiredexample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field2")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field3")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field4")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field5")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field6")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field7")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field8")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field9")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field10")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field11")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field12")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field13")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field14")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Field15")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedNinOptNative) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequiredexample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedNinOptNative: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedNinOptNative: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedNinOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequiredexample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NestedNinOpts = append(m.NestedNinOpts, &NinOptNative{})
			if err := m.NestedNinOpts[len(m.NestedNinOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequiredexample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequiredexample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequiredexample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequiredexample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequiredexample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequiredexample
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequiredexample
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequiredexample
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequiredexample        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequiredexample          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequiredexample = fmt.Errorf("proto: unexpected end of group")
)
