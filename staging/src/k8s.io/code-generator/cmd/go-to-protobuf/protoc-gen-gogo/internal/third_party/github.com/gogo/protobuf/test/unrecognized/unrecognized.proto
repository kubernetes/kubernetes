// Protocol Buffers for Go with Gadgets
//
// Copyright (c) 2013, The GoGo Authors. All rights reserved.
// http://github.com/gogo/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package unrecognized;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.stringer_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.description_all) = true;

option (gogoproto.testgen_all) = true;
option (gogoproto.populate_all) = true;

option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;

message A {
	option (gogoproto.goproto_unrecognized) = false;
	optional int64 Field1 = 2;
	repeated B B = 1;
}

message B {
	optional C C = 1;
	optional D D = 2;
	optional OldC F = 5;
}

message D {
	optional int64 Field1 = 1;
}

message C {
	optional double Field2 = 2;
	optional string Field3 = 3;
	optional double Field4 = 4;
	repeated bytes Field5 = 5;
	optional int64 Field6 = 6;
	repeated float Field7 = 7;
}

message U {
	// unserializing U as OldU must leave Field1 unset
	option (gogoproto.goproto_unrecognized) = false;
	repeated double Field2 = 2;
	optional uint32 Field3 = 3;
}

message UnoM {
	// disable marshal/unmarshal generation here
	// to check that reflection based code handles missing XXX_unrecognized field coorectly
	option (gogoproto.sizer) = false;
	option (gogoproto.marshaler) = false;
	option (gogoproto.unmarshaler) = false;
	// unserializing U as OldU must leave Field1 unset
	option (gogoproto.goproto_unrecognized) = false;

	repeated double Field2 = 2;
	optional uint32 Field3 = 3;
}

message OldA {
	// OldA == A, so removing unrecognized should not affect anything, tests must pass
	option (gogoproto.goproto_unrecognized) = false;
	optional int64 Field1 = 2;
	repeated OldB B = 1;
}

message OldB {
	optional OldC C = 1;
	optional OldC F = 5;
}

message OldC {
	optional int64 Field1 = 1;
	optional double Field2 = 2;
	optional string Field3 = 3;
	optional int64 Field6 = 6;
	repeated float Field7 = 7;
}

message OldU {
	optional string Field1 = 1;
	repeated double Field2 = 2;
}

message OldUnoM {
	// disable marshal/unmarshal generation here
	// to check that reflection based code handles missing XXX_unrecognized field coorectly
	option (gogoproto.sizer) = false;
	option (gogoproto.marshaler) = false;
	option (gogoproto.unmarshaler) = false;

	optional string Field1 = 1;
	repeated double Field2 = 2;
}
